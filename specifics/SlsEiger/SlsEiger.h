/*----- PROTECTED REGION ID(SlsEiger.h) ENABLED START -----*/
//=============================================================================
//
// file :        SlsEiger.h
//
// description : Include file for the SlsEiger class
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SlsEiger_H
#define SlsEiger_H

#include <tango.h>

//- YAT/YAT4TANGO
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/DynamicInterfaceManager.h>

#include "Factory.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"

#include "SlsEigerInterface.h"
#include "SlsEigerCamera.h"


using namespace yat4tango;

/*----- PROTECTED REGION END -----*/	//	SlsEiger.h

/**
 *  SlsEiger class description:
 *    Device for sls detectors from PSI. 
 */

namespace SlsEiger_ns
{
/*----- PROTECTED REGION ID(SlsEiger::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	SlsEiger::Additional Class Declarations

class SlsEiger : public Tango::Device_4Impl
{

/*----- PROTECTED REGION ID(SlsEiger::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	SlsEiger::Data Members

//	Device property data members
public:
	//	ConfigFileName:	Configuration files used during the camera instanciation.
	string	configFileName;
	//	ExpertReadoutTime:	Only an expert User could change this property.<br>
	//  This is the readout time in seconds of the camera.<BR>
	Tango::DevDouble	expertReadoutTime;
	//	ExpertReceiverFifoDepth:	Only an expert User could change this property.<br>
	//  This is the number of frames in memory of the receiver.<BR>
	Tango::DevLong	expertReceiverFifoDepth;
	//	ExpertFramePacketNumber8:	Only an expert User could change this property.<br>
	//  This is the number of packet for each received frame part in bit depth 8bits.<BR>
	Tango::DevLong	expertFramePacketNumber8;
	//	ExpertFramePacketNumber16:	Only an expert User could change this property.<br>
	//  This is the number of packet for each received frame part in bit depth 16bits.<BR>
	Tango::DevLong	expertFramePacketNumber16;
	//	ExpertFramePacketNumber32:	Only an expert User could change this property.<br>
	//  This is the number of packet for each received frame part in bit depth 32bits.<BR>
	Tango::DevLong	expertFramePacketNumber32;
	//	ExpertLiveModeMinFramePeriodSec:	Only an expert User could change this property.<br>
	//  This is the minimum period in seconds between frames for the live mode.<BR>
	Tango::DevDouble	expertLiveModeMinFramePeriodSec;

//	Attribute data members
public:
	Tango::DevString	*attr_clockDivider_read;
	Tango::DevString	*attr_parallelMode_read;
	Tango::DevBoolean	*attr_overflowMode_read;
	Tango::DevDouble	*attr_subFrameExposureTime_read;
	Tango::DevString	*attr_gainMode_read;
	Tango::DevLong	*attr_thresholdEnergy_read;
	Tango::DevBoolean	*attr_countRateCorrectionActivation_read;
	Tango::DevLong	*attr_countRateCorrection_read;
	Tango::DevBoolean	*attr_gapPixelsActivation_read;
	Tango::DevDouble	*attr_edgePixelsCorrection_read;
	Tango::DevDouble	*attr_cornerPixelsCorrection_read;
	Tango::DevString	*attr_configFileName_read;
	Tango::DevString	*attr_detectorFirmwareVersion_read;
	Tango::DevString	*attr_detectorSoftwareVersion_read;
	Tango::DevLong	*attr_tempFpga1_read;
	Tango::DevLong	*attr_tempFpga2_read;
	Tango::DevLong	*attr_tempFpgaext1_read;
	Tango::DevLong	*attr_tempFpgaext2_read;
	Tango::DevLong	*attr_temp10ge1_read;
	Tango::DevLong	*attr_temp10ge2_read;
	Tango::DevLong	*attr_tempDcdc1_read;
	Tango::DevLong	*attr_tempDcdc2_read;
	Tango::DevLong	*attr_tempSodl1_read;
	Tango::DevLong	*attr_tempSodl2_read;
	Tango::DevLong	*attr_tempSodr1_read;
	Tango::DevLong	*attr_tempSodr2_read;
	Tango::DevLong	*attr_tempFpgafl1_read;
	Tango::DevLong	*attr_tempFpgafl2_read;
	Tango::DevLong	*attr_tempFpgafr1_read;
	Tango::DevLong	*attr_tempFpgafr2_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SlsEiger(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SlsEiger(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SlsEiger(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~SlsEiger() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SlsEiger::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : SlsEiger::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute clockDivider related methods
 *	Description: Changes the readout clock.<br>
 *               Available clock Divider :<br>
 *               FULL_SPEED (equivalent to the 0 sls value)<br>
 *               HALF_SPEED (equivalent to the 1 sls value)<br>
 *               QUARTER_SPEED (equivalent to the 2 sls value)<br>
 *               SUPER_SLOW_SPEED (currently not used)<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_clockDivider(Tango::Attribute &attr);
	virtual void write_clockDivider(Tango::WAttribute &attr);
	virtual bool is_clockDivider_allowed(Tango::AttReqType type);
/**
 *	Attribute parallelMode related methods
 *	Description: Changes the parallel mode.<br>
 *               Available parallel modes :<br>
 *               NON_PARALLEL<br>
 *               PARALLEL<br>
 *               SAFE<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_parallelMode(Tango::Attribute &attr);
	virtual void write_parallelMode(Tango::WAttribute &attr);
	virtual bool is_parallelMode_allowed(Tango::AttReqType type);
/**
 *	Attribute overflowMode related methods
 *	Description: When activated, shows saturated for overflow in subframes in 32 bit mode .<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_overflowMode(Tango::Attribute &attr);
	virtual void write_overflowMode(Tango::WAttribute &attr);
	virtual bool is_overflowMode_allowed(Tango::AttReqType type);
/**
 *	Attribute subFrameExposureTime related methods
 *	Description: Set sub frame exposure time for 32 bit mode .<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_subFrameExposureTime(Tango::Attribute &attr);
	virtual void write_subFrameExposureTime(Tango::WAttribute &attr);
	virtual bool is_subFrameExposureTime_allowed(Tango::AttReqType type);
/**
 *	Attribute gainMode related methods
 *	Description: Changes the gain mode.<br>
 *               Available gain modes:<br>
 *               STANDARD<br>
 *               LOW<br>
 *               MEDIUM<br>
 *               HIGH<br>
 *               VERY_HIGH<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_gainMode(Tango::Attribute &attr);
	virtual void write_gainMode(Tango::WAttribute &attr);
	virtual bool is_gainMode_allowed(Tango::AttReqType type);
/**
 *	Attribute thresholdEnergy related methods
 *	Description: Get/Set threshold energy for modules in eV.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_thresholdEnergy(Tango::Attribute &attr);
	virtual void write_thresholdEnergy(Tango::WAttribute &attr);
	virtual bool is_thresholdEnergy_allowed(Tango::AttReqType type);
/**
 *	Attribute countRateCorrectionActivation related methods
 *	Description: Set/get count rate correction activation value.<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_countRateCorrectionActivation(Tango::Attribute &attr);
	virtual void write_countRateCorrectionActivation(Tango::WAttribute &attr);
	virtual bool is_countRateCorrectionActivation_allowed(Tango::AttReqType type);
/**
 *	Attribute countRateCorrection related methods
 *	Description: Get count rate correction in ns.<br>
 *               When the count rate correction is disabled, the value will be 0.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_countRateCorrection(Tango::Attribute &attr);
	virtual bool is_countRateCorrection_allowed(Tango::AttReqType type);
/**
 *	Attribute gapPixelsActivation related methods
 *	Description: Set/get gap pixels management activation value.<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_gapPixelsActivation(Tango::Attribute &attr);
	virtual void write_gapPixelsActivation(Tango::WAttribute &attr);
	virtual bool is_gapPixelsActivation_allowed(Tango::AttReqType type);
/**
 *	Attribute edgePixelsCorrection related methods
 *	Description: Set/get the coefficient used for the correction of edge pixels values.<br>
 *               Indeed, the physical pixels at the border of the chips in the sensor are double in size.<br>
 *               The coefficient value will be close to 2.0 but must be tweaked by taking into account<br>
 *               the threshold energy.<br>
 *               This attribute is used when the gapPixelsActivation is enabled.<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_edgePixelsCorrection(Tango::Attribute &attr);
	virtual void write_edgePixelsCorrection(Tango::WAttribute &attr);
	virtual bool is_edgePixelsCorrection_allowed(Tango::AttReqType type);
/**
 *	Attribute cornerPixelsCorrection related methods
 *	Description: Set/get the coefficient used for the correction of corner pixels values.<br>
 *               Indeed, the physical pixels in the corner between chips are four-times the normal size.<br>
 *               The coefficient value will be close to 4.0 but must be tweaked by taking into account<br>
 *               the threshold energy.<br>
 *               This attribute is used when the gapPixelsActivation is enabled.<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_cornerPixelsCorrection(Tango::Attribute &attr);
	virtual void write_cornerPixelsCorrection(Tango::WAttribute &attr);
	virtual bool is_cornerPixelsCorrection_allowed(Tango::AttReqType type);
/**
 *	Attribute configFileName related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_configFileName(Tango::Attribute &attr);
	virtual bool is_configFileName_allowed(Tango::AttReqType type);
/**
 *	Attribute detectorFirmwareVersion related methods
 *	Description: Get detector firmware version.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_detectorFirmwareVersion(Tango::Attribute &attr);
	virtual bool is_detectorFirmwareVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute detectorSoftwareVersion related methods
 *	Description: Get detector software version.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_detectorSoftwareVersion(Tango::Attribute &attr);
	virtual bool is_detectorSoftwareVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpga1 related methods
 *	Description: Get temperature of hardware element (fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpga1(Tango::Attribute &attr);
	virtual bool is_tempFpga1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpga2 related methods
 *	Description: Get temperature of hardware element (fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpga2(Tango::Attribute &attr);
	virtual bool is_tempFpga2_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpgaext1 related methods
 *	Description: Get temperature of hardware element (close to the fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpgaext1(Tango::Attribute &attr);
	virtual bool is_tempFpgaext1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpgaext2 related methods
 *	Description: Get temperature of hardware element (close to the fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpgaext2(Tango::Attribute &attr);
	virtual bool is_tempFpgaext2_allowed(Tango::AttReqType type);
/**
 *	Attribute temp10ge1 related methods
 *	Description: Get temperature of hardware element (close to the 10GE) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_temp10ge1(Tango::Attribute &attr);
	virtual bool is_temp10ge1_allowed(Tango::AttReqType type);
/**
 *	Attribute temp10ge2 related methods
 *	Description: Get temperature of hardware element (close to the 10GE) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_temp10ge2(Tango::Attribute &attr);
	virtual bool is_temp10ge2_allowed(Tango::AttReqType type);
/**
 *	Attribute tempDcdc1 related methods
 *	Description: Get temperature of hardware element (close to the dc dc converter) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempDcdc1(Tango::Attribute &attr);
	virtual bool is_tempDcdc1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempDcdc2 related methods
 *	Description: Get temperature of hardware element (close to the dc dc converter) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempDcdc2(Tango::Attribute &attr);
	virtual bool is_tempDcdc2_allowed(Tango::AttReqType type);
/**
 *	Attribute tempSodl1 related methods
 *	Description: Get temperature of hardware element (close to the left so-dimm memory) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempSodl1(Tango::Attribute &attr);
	virtual bool is_tempSodl1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempSodl2 related methods
 *	Description: Get temperature of hardware element (close to the left so-dimm memory) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempSodl2(Tango::Attribute &attr);
	virtual bool is_tempSodl2_allowed(Tango::AttReqType type);
/**
 *	Attribute tempSodr1 related methods
 *	Description: Get temperature of hardware element (close to the right so-dimm memory) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempSodr1(Tango::Attribute &attr);
	virtual bool is_tempSodr1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempSodr2 related methods
 *	Description: Get temperature of hardware element (close to the right so-dimm memory) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempSodr2(Tango::Attribute &attr);
	virtual bool is_tempSodr2_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpgafl1 related methods
 *	Description: Get temperature of hardware element (left front end board fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpgafl1(Tango::Attribute &attr);
	virtual bool is_tempFpgafl1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpgafl2 related methods
 *	Description: Get temperature of hardware element (left front end board fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpgafl2(Tango::Attribute &attr);
	virtual bool is_tempFpgafl2_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpgafr1 related methods
 *	Description: Get temperature of hardware element (right front end board fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpgafr1(Tango::Attribute &attr);
	virtual bool is_tempFpgafr1_allowed(Tango::AttReqType type);
/**
 *	Attribute tempFpgafr2 related methods
 *	Description: Get temperature of hardware element (right front end board fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_tempFpgafr2(Tango::Attribute &attr);
	virtual bool is_tempFpgafr2_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : SlsEiger::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command SetCmd related method
	 *	Description: Allows to execute a line command (set type)
	 *
	 *	@param argin SlsDetector command
	 *	@returns SlsDetector response
	 */
	virtual Tango::DevString set_cmd(Tango::DevString argin);
	virtual bool is_SetCmd_allowed(const CORBA::Any &any);
	/**
	 *	Command GetCmd related method
	 *	Description: Allows to execute a line command (get type)
	 *
	 *	@param argin SlsDetector command
	 *	@returns SlsDetector response
	 */
	virtual Tango::DevString get_cmd(Tango::DevString argin);
	virtual bool is_GetCmd_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(SlsEiger::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
private:
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	Tango::DevState	dev_state();

/**
 *	method:	SlsEiger::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
    void manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	SlsEiger::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
    void manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	SlsEiger::read_temp
 *
 *	description: method which manages the temperature reading of 
 *               the hardware part for a module 
 */
    void read_temp(Tango::Attribute & out_attr,
                   Tango::DevLong * out_attr_read,
                   lima::SlsEiger::Temperature in_temperature_type,
                   int in_module_index,
                   const std::string & in_caller_method_name);

protected :	
    //lima OBJECTS
    lima::SlsEiger::Interface * m_hw    ;
    lima::CtControl           * m_ct    ;
    lima::SlsEiger::Camera    * m_camera;
	bool                        m_is_device_initialized;
    stringstream                m_status_message        ;

	yat4tango::DynamicInterfaceManager m_dim;

/*----- PROTECTED REGION END -----*/	//	SlsEiger::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SlsEiger::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	SlsEiger::Additional Classes Definitions

}	//	End of namespace

#endif   //	SlsEiger_H

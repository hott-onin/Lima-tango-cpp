/*----- PROTECTED REGION ID(MerlinClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        MerlinClass.cpp
//
// description : C++ source for the MerlinClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the Merlin once per process.
//
// project :     Merlin: A Medipix3RX Quad readout
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <MerlinClass.h>

/*----- PROTECTED REGION END -----*/	//	MerlinClass.cpp

//-------------------------------------------------------------------
/**
 *	Create MerlinClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Merlin_class(const char *name) {
		return Merlin_ns::MerlinClass::init(name);
	}
}

namespace Merlin_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
MerlinClass *MerlinClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		MerlinClass::MerlinClass(string &s)
 * description : 	constructor for the MerlinClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
MerlinClass::MerlinClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering MerlinClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(MerlinClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::constructor

	cout2 << "Leaving MerlinClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		MerlinClass::~MerlinClass()
 * description : 	destructor for the MerlinClass
 */
//--------------------------------------------------------
MerlinClass::~MerlinClass()
{
	/*----- PROTECTED REGION ID(MerlinClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		MerlinClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
MerlinClass *MerlinClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new MerlinClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		MerlinClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
MerlinClass *MerlinClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		DevStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevStateClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "DevStateClass::execute(): arrived" << endl;
	return insert((static_cast<Merlin *>(device))->dev_state());
}

//--------------------------------------------------------
/**
 * method : 		SoftTriggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SoftTriggerClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SoftTriggerClass::execute(): arrived" << endl;
	((static_cast<Merlin *>(device))->soft_trigger());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
* method : 		AbortClass::execute()
* description : 	method to trigger the execution of the command.
*
* @param	device	The device on which the command must be executed
* @param	in_any	The command input data
*
*	returns The command output data (packed in the Any object)
*/
//--------------------------------------------------------
CORBA::Any *AbortClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "AbortClass::execute(): arrived" << endl;
    ((static_cast<Merlin *>(device))->abort());
    return new CORBA::Any();
}






//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : MerlinClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum MerlinClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : MerlinClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum MerlinClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : MerlinClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum MerlinClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : MerlinClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void MerlinClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "HostName";
	prop_desc = "The name of the Merlin PC";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "CmdPort";
	prop_desc = "The Merlin command port";
	prop_def  = "6341";
	vect_data.clear();
	vect_data.push_back("6341");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DataPort";
	prop_desc = "The Merlin data port";
	prop_def  = "6342";
	vect_data.clear();
	vect_data.push_back("6342");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Chips";
	prop_desc = "Nos of Medipix chips";
	prop_def  = "4";
	vect_data.clear();
	vect_data.push_back("4");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ImageWidth";
	prop_desc = "The width of Merlin detector head in pixels";
	prop_def  = "512";
	vect_data.clear();
	vect_data.push_back("512");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ImageHeight";
	prop_desc = "The height of the Merlin detector head in Pixels";
	prop_def  = "512";
	vect_data.clear();
	vect_data.push_back("512");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Simulate";
	prop_desc = "Simulate the Merlin commands.";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : MerlinClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void MerlinClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Merlin: A Medipix3RX Quad readout");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("Merlin");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Tango::Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : MerlinClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void MerlinClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(MerlinClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new Merlin(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		Merlin *dev = static_cast<Merlin *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(MerlinClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : MerlinClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void MerlinClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(MerlinClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::attribute_factory_before
	//	Attribute : softwareVersion
	softwareVersionAttrib	*softwareversion = new softwareVersionAttrib();
	Tango::UserDefaultAttrProp	softwareversion_prop;
    softwareversion_prop.set_unit(" ");
	//	description	not set for softwareVersion
	//	label	not set for softwareVersion
	//	unit	not set for softwareVersion
	//	standard_unit	not set for softwareVersion
	//	display_unit	not set for softwareVersion
	//	format	not set for softwareVersion
	//	max_value	not set for softwareVersion
	//	min_value	not set for softwareVersion
	//	max_alarm	not set for softwareVersion
	//	min_alarm	not set for softwareVersion
	//	max_warning	not set for softwareVersion
	//	min_warning	not set for softwareVersion
	//	delta_t	not set for softwareVersion
	//	delta_val	not set for softwareVersion
	
	softwareversion->set_default_properties(softwareversion_prop);
	//	Not Polled
	softwareversion->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(softwareversion);

	//	Attribute : chargeSumming
	chargeSummingAttrib	*chargesumming = new chargeSummingAttrib();
	Tango::UserDefaultAttrProp	chargesumming_prop;
    chargesumming_prop.set_description("ON/OFF");
    chargesumming_prop.set_unit(" ");
	//	description	not set for chargeSumming
	//	label	not set for chargeSumming
	//	unit	not set for chargeSumming
	//	standard_unit	not set for chargeSumming
	//	display_unit	not set for chargeSumming
	//	format	not set for chargeSumming
	//	max_value	not set for chargeSumming
	//	min_value	not set for chargeSumming
	//	max_alarm	not set for chargeSumming
	//	min_alarm	not set for chargeSumming
	//	max_warning	not set for chargeSumming
	//	min_warning	not set for chargeSumming
	//	delta_t	not set for chargeSumming
	//	delta_val	not set for chargeSumming
	
	chargesumming->set_default_properties(chargesumming_prop);
	//	Not Polled
	chargesumming->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(chargesumming);

	//	Attribute : colourMode
	colourModeAttrib	*colourmode = new colourModeAttrib();
	Tango::UserDefaultAttrProp	colourmode_prop;
    colourmode_prop.set_description("MONOCHROME/COLOUR");
    colourmode_prop.set_unit(" ");
	//	description	not set for colourMode
	//	label	not set for colourMode
	//	unit	not set for colourMode
	//	standard_unit	not set for colourMode
	//	display_unit	not set for colourMode
	//	format	not set for colourMode
	//	max_value	not set for colourMode
	//	min_value	not set for colourMode
	//	max_alarm	not set for colourMode
	//	min_alarm	not set for colourMode
	//	max_warning	not set for colourMode
	//	min_warning	not set for colourMode
	//	delta_t	not set for colourMode
	//	delta_val	not set for colourMode
	
	colourmode->set_default_properties(colourmode_prop);
	//	Not Polled
	colourmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(colourmode);

	//	Attribute : continuousRW
	continuousRWAttrib	*continuousrw = new continuousRWAttrib();
	Tango::UserDefaultAttrProp	continuousrw_prop;
    continuousrw_prop.set_description("ON/OFF");
    continuousrw_prop.set_unit(" ");
	//	description	not set for continuousRW
	//	label	not set for continuousRW
	//	unit	not set for continuousRW
	//	standard_unit	not set for continuousRW
	//	display_unit	not set for continuousRW
	//	format	not set for continuousRW
	//	max_value	not set for continuousRW
	//	min_value	not set for continuousRW
	//	max_alarm	not set for continuousRW
	//	min_alarm	not set for continuousRW
	//	max_warning	not set for continuousRW
	//	min_warning	not set for continuousRW
	//	delta_t	not set for continuousRW
	//	delta_val	not set for continuousRW
	
	continuousrw->set_default_properties(continuousrw_prop);
	//	Not Polled
	continuousrw->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(continuousrw);

	//	Attribute : counter
	counterAttrib	*counter = new counterAttrib();
	Tango::UserDefaultAttrProp	counter_prop;
    counter_prop.set_description("0 = COUNTER0\n1 = COUNTER1\n2 = BOTH");
    counter_prop.set_unit(" ");
    counter_prop.set_min_value("0");
    counter_prop.set_max_value("2");
    counter_prop.set_format("%1d");
	//	description	not set for counter
	//	label	not set for counter
	//	unit	not set for counter
	//	standard_unit	not set for counter
	//	display_unit	not set for counter
	//	format	not set for counter
	//	max_value	not set for counter
	//	min_value	not set for counter
	//	max_alarm	not set for counter
	//	min_alarm	not set for counter
	//	max_warning	not set for counter
	//	min_warning	not set for counter
	//	delta_t	not set for counter
	//	delta_val	not set for counter
	
	counter->set_default_properties(counter_prop);
	//	Not Polled
	counter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(counter);

	//	Attribute : gain
	gainAttrib	*gain = new gainAttrib();
	Tango::UserDefaultAttrProp	gain_prop;
    gain_prop.set_description("0 = SHGM\n1 = HGM\n2 = LGM\n3 = SLGM");
    gain_prop.set_unit(" ");
    gain_prop.set_min_value("0");
    gain_prop.set_max_value("3");
    gain_prop.set_format("%1d");
	//	description	not set for gain
	//	label	not set for gain
	//	unit	not set for gain
	//	standard_unit	not set for gain
	//	display_unit	not set for gain
	//	format	not set for gain
	//	max_value	not set for gain
	//	min_value	not set for gain
	//	max_alarm	not set for gain
	//	min_alarm	not set for gain
	//	max_warning	not set for gain
	//	min_warning	not set for gain
	//	delta_t	not set for gain
	//	delta_val	not set for gain
	
	gain->set_default_properties(gain_prop);
	//	Not Polled
	gain->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(gain);

	//	Attribute : operatingEnergy
	operatingEnergyAttrib	*operatingenergy = new operatingEnergyAttrib();
	Tango::UserDefaultAttrProp	operatingenergy_prop;
    operatingenergy_prop.set_unit("keV");
    operatingenergy_prop.set_min_value("0");
    operatingenergy_prop.set_max_value("999.99");
	//	description	not set for operatingEnergy
	//	label	not set for operatingEnergy
	//	unit	not set for operatingEnergy
	//	standard_unit	not set for operatingEnergy
	//	display_unit	not set for operatingEnergy
	//	format	not set for operatingEnergy
	//	max_value	not set for operatingEnergy
	//	min_value	not set for operatingEnergy
	//	max_alarm	not set for operatingEnergy
	//	min_alarm	not set for operatingEnergy
	//	max_warning	not set for operatingEnergy
	//	min_warning	not set for operatingEnergy
	//	delta_t	not set for operatingEnergy
	//	delta_val	not set for operatingEnergy
	
	operatingenergy->set_default_properties(operatingenergy_prop);
	//	Not Polled
	operatingenergy->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(operatingenergy);

	//	Attribute : temperature
	temperatureAttrib	*temperature = new temperatureAttrib();
	Tango::UserDefaultAttrProp	temperature_prop;
    temperature_prop.set_unit("deg C");
	//	description	not set for temperature
	//	label	not set for temperature
	//	unit	not set for temperature
	//	standard_unit	not set for temperature
	//	display_unit	not set for temperature
	//	format	not set for temperature
	//	max_value	not set for temperature
	//	min_value	not set for temperature
	//	max_alarm	not set for temperature
	//	min_alarm	not set for temperature
	//	max_warning	not set for temperature
	//	min_warning	not set for temperature
	//	delta_t	not set for temperature
	//	delta_val	not set for temperature
	
	temperature->set_default_properties(temperature_prop);
	//	Not Polled
	temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(temperature);

	//	Attribute : threshold0
	threshold0Attrib	*threshold0 = new threshold0Attrib();
	Tango::UserDefaultAttrProp	threshold0_prop;
    threshold0_prop.set_unit("keV");
    threshold0_prop.set_min_value("0");
    threshold0_prop.set_max_value("999.99");
	//	description	not set for threshold0
	//	label	not set for threshold0
	//	unit	not set for threshold0
	//	standard_unit	not set for threshold0
	//	display_unit	not set for threshold0
	//	format	not set for threshold0
	//	max_value	not set for threshold0
	//	min_value	not set for threshold0
	//	max_alarm	not set for threshold0
	//	min_alarm	not set for threshold0
	//	max_warning	not set for threshold0
	//	min_warning	not set for threshold0
	//	delta_t	not set for threshold0
	//	delta_val	not set for threshold0
	
	threshold0->set_default_properties(threshold0_prop);
	//	Not Polled
	threshold0->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold0);

	//	Attribute : threshold1
	threshold1Attrib	*threshold1 = new threshold1Attrib();
	Tango::UserDefaultAttrProp	threshold1_prop;
    threshold1_prop.set_unit("keV");
    threshold1_prop.set_min_value("0");
    threshold1_prop.set_max_value("999.99");
	//	description	not set for threshold1
	//	label	not set for threshold1
	//	unit	not set for threshold1
	//	standard_unit	not set for threshold1
	//	display_unit	not set for threshold1
	//	format	not set for threshold1
	//	max_value	not set for threshold1
	//	min_value	not set for threshold1
	//	max_alarm	not set for threshold1
	//	min_alarm	not set for threshold1
	//	max_warning	not set for threshold1
	//	min_warning	not set for threshold1
	//	delta_t	not set for threshold1
	//	delta_val	not set for threshold1
	
	threshold1->set_default_properties(threshold1_prop);
	//	Not Polled
	threshold1->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold1);

	//	Attribute : threshold2
	threshold2Attrib	*threshold2 = new threshold2Attrib();
	Tango::UserDefaultAttrProp	threshold2_prop;
    threshold2_prop.set_unit("keV");
    threshold2_prop.set_min_value("0");
    threshold2_prop.set_max_value("999.99");
	//	description	not set for threshold2
	//	label	not set for threshold2
	//	unit	not set for threshold2
	//	standard_unit	not set for threshold2
	//	display_unit	not set for threshold2
	//	format	not set for threshold2
	//	max_value	not set for threshold2
	//	min_value	not set for threshold2
	//	max_alarm	not set for threshold2
	//	min_alarm	not set for threshold2
	//	max_warning	not set for threshold2
	//	min_warning	not set for threshold2
	//	delta_t	not set for threshold2
	//	delta_val	not set for threshold2
	
	threshold2->set_default_properties(threshold2_prop);
	//	Not Polled
	threshold2->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold2);

	//	Attribute : threshold3
	threshold3Attrib	*threshold3 = new threshold3Attrib();
	Tango::UserDefaultAttrProp	threshold3_prop;
    threshold3_prop.set_unit("keV");
    threshold3_prop.set_min_value("0");
    threshold3_prop.set_max_value("999.99");
	//	description	not set for threshold3
	//	label	not set for threshold3
	//	unit	not set for threshold3
	//	standard_unit	not set for threshold3
	//	display_unit	not set for threshold3
	//	format	not set for threshold3
	//	max_value	not set for threshold3
	//	min_value	not set for threshold3
	//	max_alarm	not set for threshold3
	//	min_alarm	not set for threshold3
	//	max_warning	not set for threshold3
	//	min_warning	not set for threshold3
	//	delta_t	not set for threshold3
	//	delta_val	not set for threshold3
	
	threshold3->set_default_properties(threshold3_prop);
	//	Not Polled
	threshold3->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold3);

	//	Attribute : threshold4
	threshold4Attrib	*threshold4 = new threshold4Attrib();
	Tango::UserDefaultAttrProp	threshold4_prop;
    threshold4_prop.set_unit("keV");
    threshold4_prop.set_min_value("0");
    threshold4_prop.set_max_value("999.99");
	//	description	not set for threshold4
	//	label	not set for threshold4
	//	unit	not set for threshold4
	//	standard_unit	not set for threshold4
	//	display_unit	not set for threshold4
	//	format	not set for threshold4
	//	max_value	not set for threshold4
	//	min_value	not set for threshold4
	//	max_alarm	not set for threshold4
	//	min_alarm	not set for threshold4
	//	max_warning	not set for threshold4
	//	min_warning	not set for threshold4
	//	delta_t	not set for threshold4
	//	delta_val	not set for threshold4
	
	threshold4->set_default_properties(threshold4_prop);
	//	Not Polled
	threshold4->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold4);

	//	Attribute : threshold5
	threshold5Attrib	*threshold5 = new threshold5Attrib();
	Tango::UserDefaultAttrProp	threshold5_prop;
    threshold5_prop.set_unit("keV");
    threshold5_prop.set_min_value("0");
    threshold5_prop.set_max_value("999.99");
	//	description	not set for threshold5
	//	label	not set for threshold5
	//	unit	not set for threshold5
	//	standard_unit	not set for threshold5
	//	display_unit	not set for threshold5
	//	format	not set for threshold5
	//	max_value	not set for threshold5
	//	min_value	not set for threshold5
	//	max_alarm	not set for threshold5
	//	min_alarm	not set for threshold5
	//	max_warning	not set for threshold5
	//	min_warning	not set for threshold5
	//	delta_t	not set for threshold5
	//	delta_val	not set for threshold5
	
	threshold5->set_default_properties(threshold5_prop);
	//	Not Polled
	threshold5->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold5);

	//	Attribute : threshold6
	threshold6Attrib	*threshold6 = new threshold6Attrib();
	Tango::UserDefaultAttrProp	threshold6_prop;
    threshold6_prop.set_unit("keV");
    threshold6_prop.set_min_value("0");
    threshold6_prop.set_max_value("999.99");
	//	description	not set for threshold6
	//	label	not set for threshold6
	//	unit	not set for threshold6
	//	standard_unit	not set for threshold6
	//	display_unit	not set for threshold6
	//	format	not set for threshold6
	//	max_value	not set for threshold6
	//	min_value	not set for threshold6
	//	max_alarm	not set for threshold6
	//	min_alarm	not set for threshold6
	//	max_warning	not set for threshold6
	//	min_warning	not set for threshold6
	//	delta_t	not set for threshold6
	//	delta_val	not set for threshold6
	
	threshold6->set_default_properties(threshold6_prop);
	//	Not Polled
	threshold6->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold6);

	//	Attribute : threshold7
	threshold7Attrib	*threshold7 = new threshold7Attrib();
	Tango::UserDefaultAttrProp	threshold7_prop;
    threshold7_prop.set_unit("keV");
    threshold7_prop.set_min_value("0");
    threshold7_prop.set_max_value("999.99");
	//	description	not set for threshold7
	//	label	not set for threshold7
	//	unit	not set for threshold7
	//	standard_unit	not set for threshold7
	//	display_unit	not set for threshold7
	//	format	not set for threshold7
	//	max_value	not set for threshold7
	//	min_value	not set for threshold7
	//	max_alarm	not set for threshold7
	//	min_alarm	not set for threshold7
	//	max_warning	not set for threshold7
	//	min_warning	not set for threshold7
	//	delta_t	not set for threshold7
	//	delta_val	not set for threshold7
	
	threshold7->set_default_properties(threshold7_prop);
	//	Not Polled
	threshold7->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(threshold7);

    //	Attribute : framesPerTrigger
    framesPerTriggerAttrib	*framesPerTrigger = new framesPerTriggerAttrib();
    Tango::UserDefaultAttrProp	framesPerTrigger_prop;
    framesPerTrigger_prop.set_description("Number of frames per trigger");
    framesPerTrigger_prop.set_unit(" ");
    //	description	not set for framesPerTrigger
    //	label	not set for framesPerTrigger
    //	unit	not set for framesPerTrigger
    //	standard_unit	not set for framesPerTrigger
    //	display_unit	not set for framesPerTrigger
    //	format	not set for framesPerTrigger
    //	max_value	not set for framesPerTrigger
    //	min_value	not set for framesPerTrigger
    //	max_alarm	not set for framesPerTrigger
    //	min_alarm	not set for framesPerTrigger
    //	max_warning	not set for framesPerTrigger
    //	min_warning	not set for framesPerTrigger
    //	delta_t	not set for framesPerTrigger
    //	delta_val	not set for framesPerTrigger

    framesPerTrigger->set_default_properties(framesPerTrigger_prop);
    //	Not Polled
    framesPerTrigger->set_disp_level(Tango::OPERATOR);
    //	Not Memorized
    att_list.push_back(framesPerTrigger);

	//	Attribute : triggerStartType
	triggerStartTypeAttrib	*triggerstarttype = new triggerStartTypeAttrib();
	Tango::UserDefaultAttrProp	triggerstarttype_prop;
    triggerstarttype_prop.set_description("Trigger start mode:\n0 = INTERNAL\n1 = RISING_EDGE_TTL\n2 = FALLING_EDGE_TTL\n3 = RISING_EDGE_LVDS\n4 = FALLING_EDGE_LVDS\n5 = SOFT");
    triggerstarttype_prop.set_unit(" ");
	//	description	not set for triggerStartType
	//	label	not set for triggerStartType
	//	unit	not set for triggerStartType
	//	standard_unit	not set for triggerStartType
	//	display_unit	not set for triggerStartType
	//	format	not set for triggerStartType
	//	max_value	not set for triggerStartType
	//	min_value	not set for triggerStartType
	//	max_alarm	not set for triggerStartType
	//	min_alarm	not set for triggerStartType
	//	max_warning	not set for triggerStartType
	//	min_warning	not set for triggerStartType
	//	delta_t	not set for triggerStartType
	//	delta_val	not set for triggerStartType
	
	triggerstarttype->set_default_properties(triggerstarttype_prop);
	//	Not Polled
	triggerstarttype->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggerstarttype);

	//	Attribute : triggerStopType
	triggerStopTypeAttrib	*triggerstoptype = new triggerStopTypeAttrib();
	Tango::UserDefaultAttrProp	triggerstoptype_prop;
    triggerstoptype_prop.set_description("Trigger stop mode:\n0 = INTERNAL\n1 = RISING_EDGE_TTL\n2 = FALLING_EDGE_TTL\n3 = RISING_EDGE_LVDS\n4 = FALLING_EDGE_LVDS\n5 = SOFT");
    triggerstoptype_prop.set_unit(" ");
	//	description	not set for triggerStopType
	//	label	not set for triggerStopType
	//	unit	not set for triggerStopType
	//	standard_unit	not set for triggerStopType
	//	display_unit	not set for triggerStopType
	//	format	not set for triggerStopType
	//	max_value	not set for triggerStopType
	//	min_value	not set for triggerStopType
	//	max_alarm	not set for triggerStopType
	//	min_alarm	not set for triggerStopType
	//	max_warning	not set for triggerStopType
	//	min_warning	not set for triggerStopType
	//	delta_t	not set for triggerStopType
	//	delta_val	not set for triggerStopType
	
	triggerstoptype->set_default_properties(triggerstoptype_prop);
	//	Not Polled
	triggerstoptype->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggerstoptype);

	//	Attribute : triggerOutTTL
	triggerOutTTLAttrib	*triggeroutttl = new triggerOutTTLAttrib();
	Tango::UserDefaultAttrProp	triggeroutttl_prop;
    triggeroutttl_prop.set_description("TTL Trigger stop mode:\n0 = TTL\n1 = LVDS \
                                         \n2 = TTL_DELAYED\n3 = LVDS_DELAYED\n4 = FOLLOW_SHUTTER\n5 = ONE_PER_ACQ_BURST \
                                         \n5 = SHUTTER_AND_SENSOR_READ\n5 = OUTPUT_BUSY");
    triggeroutttl_prop.set_unit(" ");
	//	description	not set for triggerOutTTL
	//	label	not set for triggerOutTTL
	//	unit	not set for triggerOutTTL
	//	standard_unit	not set for triggerOutTTL
	//	display_unit	not set for triggerOutTTL
	//	format	not set for triggerOutTTL
	//	max_value	not set for triggerOutTTL
	//	min_value	not set for triggerOutTTL
	//	max_alarm	not set for triggerOutTTL
	//	min_alarm	not set for triggerOutTTL
	//	max_warning	not set for triggerOutTTL
	//	min_warning	not set for triggerOutTTL
	//	delta_t	not set for triggerOutTTL
	//	delta_val	not set for triggerOutTTL
	
	triggeroutttl->set_default_properties(triggeroutttl_prop);
	//	Not Polled
	triggeroutttl->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggeroutttl);

	//	Attribute : triggerOutLVDS
	triggerOutLVDSAttrib	*triggeroutlvds = new triggerOutLVDSAttrib();
	Tango::UserDefaultAttrProp	triggeroutlvds_prop;
    triggeroutlvds_prop.set_description("LVDS Trigger stop mode:\n0 = TTL\n1 = LVDS \
                                         \n2 = TTL_DELAYED\n3 = LVDS_DELAYED\n4 = FOLLOW_SHUTTER\n5 = ONE_PER_ACQ_BURST \
                                         \n5 = SHUTTER_AND_SENSOR_READ\n5 = OUTPUT_BUSY");
    triggeroutlvds_prop.set_unit(" ");
	//	description	not set for triggerOutLVDS
	//	label	not set for triggerOutLVDS
	//	unit	not set for triggerOutLVDS
	//	standard_unit	not set for triggerOutLVDS
	//	display_unit	not set for triggerOutLVDS
	//	format	not set for triggerOutLVDS
	//	max_value	not set for triggerOutLVDS
	//	min_value	not set for triggerOutLVDS
	//	max_alarm	not set for triggerOutLVDS
	//	min_alarm	not set for triggerOutLVDS
	//	max_warning	not set for triggerOutLVDS
	//	min_warning	not set for triggerOutLVDS
	//	delta_t	not set for triggerOutLVDS
	//	delta_val	not set for triggerOutLVDS
	
	triggeroutlvds->set_default_properties(triggeroutlvds_prop);
	//	Not Polled
	triggeroutlvds->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggeroutlvds);

	//	Attribute : triggerOutTTLInvert
	triggerOutTTLInvertAttrib	*triggeroutttlinvert = new triggerOutTTLInvertAttrib();
	Tango::UserDefaultAttrProp	triggeroutttlinvert_prop;
    triggeroutttlinvert_prop.set_description("TTL Trigger invert mode:\n0 = NORMAL\n1 = INVERTED");
    triggeroutttlinvert_prop.set_unit(" ");
	//	description	not set for triggerOutTTLInvert
	//	label	not set for triggerOutTTLInvert
	//	unit	not set for triggerOutTTLInvert
	//	standard_unit	not set for triggerOutTTLInvert
	//	display_unit	not set for triggerOutTTLInvert
	//	format	not set for triggerOutTTLInvert
	//	max_value	not set for triggerOutTTLInvert
	//	min_value	not set for triggerOutTTLInvert
	//	max_alarm	not set for triggerOutTTLInvert
	//	min_alarm	not set for triggerOutTTLInvert
	//	max_warning	not set for triggerOutTTLInvert
	//	min_warning	not set for triggerOutTTLInvert
	//	delta_t	not set for triggerOutTTLInvert
	//	delta_val	not set for triggerOutTTLInvert
	
	triggeroutttlinvert->set_default_properties(triggeroutttlinvert_prop);
	//	Not Polled
	triggeroutttlinvert->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggeroutttlinvert);

	//	Attribute : triggerOutLVDSInvert
	triggerOutLVDSInvertAttrib	*triggeroutlvdsinvert = new triggerOutLVDSInvertAttrib();
	Tango::UserDefaultAttrProp	triggeroutlvdsinvert_prop;
    triggeroutlvdsinvert_prop.set_description("LVDS Trigger invert mode:\n0 = NORMAL\n1 = INVERTED");
    triggeroutlvdsinvert_prop.set_unit(" ");
	//	description	not set for triggerOutLVDSInvert
	//	label	not set for triggerOutLVDSInvert
	//	unit	not set for triggerOutLVDSInvert
	//	standard_unit	not set for triggerOutLVDSInvert
	//	display_unit	not set for triggerOutLVDSInvert
	//	format	not set for triggerOutLVDSInvert
	//	max_value	not set for triggerOutLVDSInvert
	//	min_value	not set for triggerOutLVDSInvert
	//	max_alarm	not set for triggerOutLVDSInvert
	//	min_alarm	not set for triggerOutLVDSInvert
	//	max_warning	not set for triggerOutLVDSInvert
	//	min_warning	not set for triggerOutLVDSInvert
	//	delta_t	not set for triggerOutLVDSInvert
	//	delta_val	not set for triggerOutLVDSInvert
	
	triggeroutlvdsinvert->set_default_properties(triggeroutlvdsinvert_prop);
	//	Not Polled
	triggeroutlvdsinvert->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggeroutlvdsinvert);

	//	Attribute : triggerInTTLDelay
	triggerInTTLDelayAttrib	*triggerinttldelay = new triggerInTTLDelayAttrib();
    Tango::UserDefaultAttrProp	triggerinttldelay_prop;
    triggerinttldelay_prop.set_description("TTL Trigger delay");
    triggerinttldelay_prop.set_unit("ns");
    triggerinttldelay_prop.set_min_value("0");
    triggerinttldelay_prop.set_max_value("68719476720");
    triggerinttldelay_prop.set_format("%7d");
	//	description	not set for triggerInTTLDelay
	//	label	not set for triggerInTTLDelay
	//	unit	not set for triggerInTTLDelay
	//	standard_unit	not set for triggerInTTLDelay
	//	display_unit	not set for triggerInTTLDelay
	//	format	not set for triggerInTTLDelay
	//	max_value	not set for triggerInTTLDelay
	//	min_value	not set for triggerInTTLDelay
	//	max_alarm	not set for triggerInTTLDelay
	//	min_alarm	not set for triggerInTTLDelay
	//	max_warning	not set for triggerInTTLDelay
	//	min_warning	not set for triggerInTTLDelay
	//	delta_t	not set for triggerInTTLDelay
	//	delta_val	not set for triggerInTTLDelay
	
    triggerinttldelay->set_default_properties(triggerinttldelay_prop);
	//	Not Polled
    triggerinttldelay->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
    att_list.push_back(triggerinttldelay);

	//	Attribute : triggerInLVDSDelay
	triggerInLVDSDelayAttrib	*triggerinlvdsdelay = new triggerInLVDSDelayAttrib();
    Tango::UserDefaultAttrProp	triggerinlvdsdelay_prop;
    triggerinlvdsdelay_prop.set_description("LVDS Trigger delay");
    triggerinlvdsdelay_prop.set_unit("ns");
    triggerinlvdsdelay_prop.set_min_value("0");
    triggerinlvdsdelay_prop.set_max_value("68719476720");
    triggerinlvdsdelay_prop.set_format("%7d");
	//	description	not set for triggerInLVDSDelay
	//	label	not set for triggerInLVDSDelay
	//	unit	not set for triggerInLVDSDelay
	//	standard_unit	not set for triggerInLVDSDelay
	//	display_unit	not set for triggerInLVDSDelay
	//	format	not set for triggerInLVDSDelay
	//	max_value	not set for triggerInLVDSDelay
	//	min_value	not set for triggerInLVDSDelay
	//	max_alarm	not set for triggerInLVDSDelay
	//	min_alarm	not set for triggerInLVDSDelay
	//	max_warning	not set for triggerInLVDSDelay
	//	min_warning	not set for triggerInLVDSDelay
	//	delta_t	not set for triggerInLVDSDelay
	//	delta_val	not set for triggerInLVDSDelay
	
    triggerinlvdsdelay->set_default_properties(triggerinlvdsdelay_prop);
	//	Not Polled
    triggerinlvdsdelay->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
    att_list.push_back(triggerinlvdsdelay);

	//	Attribute : triggerUseDelay
	triggerUseDelayAttrib	*triggerusedelay = new triggerUseDelayAttrib();
	Tango::UserDefaultAttrProp	triggerusedelay_prop;
	//	description	not set for triggerUseDelay
	//	label	not set for triggerUseDelay
	//	unit	not set for triggerUseDelay
	//	standard_unit	not set for triggerUseDelay
	//	display_unit	not set for triggerUseDelay
	//	format	not set for triggerUseDelay
	//	max_value	not set for triggerUseDelay
	//	min_value	not set for triggerUseDelay
	//	max_alarm	not set for triggerUseDelay
	//	min_alarm	not set for triggerUseDelay
	//	max_warning	not set for triggerUseDelay
	//	min_warning	not set for triggerUseDelay
	//	delta_t	not set for triggerUseDelay
	//	delta_val	not set for triggerUseDelay
	
	triggerusedelay->set_default_properties(triggerusedelay_prop);
	//	Not Polled
	triggerusedelay->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(triggerusedelay);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(MerlinClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : MerlinClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void MerlinClass::command_factory()
{
	/*----- PROTECTED REGION ID(MerlinClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::command_factory_before


	//	Command DevState
	DevStateClass	*pDevStateCmd =
		new DevStateClass("DevState",
			Tango::DEV_VOID, Tango::DEV_STATE,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDevStateCmd);

	//	Command SoftTrigger
	SoftTriggerClass	*pSoftTriggerCmd =
		new SoftTriggerClass("SoftTrigger",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSoftTriggerCmd);

    //	Command Abort
    AbortClass	*pAbortCmd =
        new AbortClass("Abort",
            Tango::DEV_VOID, Tango::DEV_VOID,
            "",
            "",
            Tango::OPERATOR);
    command_list.push_back(pAbortCmd);

	

	/*----- PROTECTED REGION ID(MerlinClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		MerlinClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void MerlinClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(MerlinClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		MerlinClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void MerlinClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		Merlin *dev = static_cast<Merlin *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(MerlinClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MerlinClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : MerlinClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *MerlinClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(MerlinClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	MerlinClass::Additional Methods
} //	namespace

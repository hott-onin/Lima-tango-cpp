/*----- PROTECTED REGION ID(SlsEigerClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        SlsEigerClass.cpp
//
// description : C++ source for the SlsEigerClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the SlsEiger once per process.
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SlsEigerClass.h>

/*----- PROTECTED REGION END -----*/	//	SlsEigerClass.cpp

//-------------------------------------------------------------------
/**
 *	Create SlsEigerClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_SlsEiger_class(const char *name) {
		return SlsEiger_ns::SlsEigerClass::init(name);
	}
}

namespace SlsEiger_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
SlsEigerClass *SlsEigerClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		SlsEigerClass::SlsEigerClass(string &s)
 * description : 	constructor for the SlsEigerClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
SlsEigerClass::SlsEigerClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering SlsEigerClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(SlsEigerClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::constructor

	cout2 << "Leaving SlsEigerClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		SlsEigerClass::~SlsEigerClass()
 * description : 	destructor for the SlsEigerClass
 */
//--------------------------------------------------------
SlsEigerClass::~SlsEigerClass()
{
	/*----- PROTECTED REGION ID(SlsEigerClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		SlsEigerClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
SlsEigerClass *SlsEigerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new SlsEigerClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		SlsEigerClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
SlsEigerClass *SlsEigerClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		SetCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetCmdClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetCmdClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<SlsEiger *>(device))->set_cmd(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetCmdClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetCmdClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<SlsEiger *>(device))->get_cmd(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum SlsEigerClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum SlsEigerClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum SlsEigerClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void SlsEigerClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "ConfigFileName";
	prop_desc = "Configuration files used during the camera instanciation.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpertReadoutTime";
	prop_desc = "Only an expert User could change this property.<br>\nThis is the readout time in seconds of the camera.<BR>";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpertReceiverFifoDepth";
	prop_desc = "Only an expert User could change this property.<br>\nThis is the number of frames in memory of the receiver.<BR>";
	prop_def  = "8000";
	vect_data.clear();
	vect_data.push_back("8000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpertFramePacketNumber8";
	prop_desc = "Only an expert User could change this property.<br>\nThis is the number of packet for each received frame part in bit depth 8bits.<BR>";
	prop_def  = "32";
	vect_data.clear();
	vect_data.push_back("32");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpertFramePacketNumber16";
	prop_desc = "Only an expert User could change this property.<br>\nThis is the number of packet for each received frame part in bit depth 16bits.<BR>";
	prop_def  = "64";
	vect_data.clear();
	vect_data.push_back("64");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpertFramePacketNumber32";
	prop_desc = "Only an expert User could change this property.<br>\nThis is the number of packet for each received frame part in bit depth 32bits.<BR>";
	prop_def  = "128";
	vect_data.clear();
	vect_data.push_back("128");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpertLiveModeMinFramePeriodSec";
	prop_desc = "Only an expert User could change this property.<br>\nThis is the minimum period in seconds between frames for the live mode.<BR>";
	prop_def  = "1.0";
	vect_data.clear();
	vect_data.push_back("1.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void SlsEigerClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Sls dectector TANGO specific device.");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device for sls detectors from PSI. ");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("SlsEiger");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Tango::Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void SlsEigerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(SlsEigerClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new SlsEiger(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	//erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		SlsEiger *dev = static_cast<SlsEiger *>(device_list[device_list.size()-i]);
		//dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(SlsEigerClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void SlsEigerClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(SlsEigerClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::attribute_factory_before
	//	Attribute : clockDivider
	clockDividerAttrib	*clockdivider = new clockDividerAttrib();
	Tango::UserDefaultAttrProp	clockdivider_prop;
	clockdivider_prop.set_description("Changes the readout clock.<br>\nAvailable clock Divider :<br>\nFULL_SPEED (equivalent to the 0 sls value)<br>\nHALF_SPEED (equivalent to the 1 sls value)<br>\nQUARTER_SPEED (equivalent to the 2 sls value)<br>\nSUPER_SLOW_SPEED (currently not used)<br>");
	//	label	not set for clockDivider
	//	unit	not set for clockDivider
	//	standard_unit	not set for clockDivider
	//	display_unit	not set for clockDivider
	//	format	not set for clockDivider
	//	max_value	not set for clockDivider
	//	min_value	not set for clockDivider
	//	max_alarm	not set for clockDivider
	//	min_alarm	not set for clockDivider
	//	max_warning	not set for clockDivider
	//	min_warning	not set for clockDivider
	//	delta_t	not set for clockDivider
	//	delta_val	not set for clockDivider
	
	clockdivider->set_default_properties(clockdivider_prop);
	//	Not Polled
	clockdivider->set_disp_level(Tango::OPERATOR);
	clockdivider->set_memorized();
	clockdivider->set_memorized_init(true);
	att_list.push_back(clockdivider);

	//	Attribute : parallelMode
	parallelModeAttrib	*parallelmode = new parallelModeAttrib();
	Tango::UserDefaultAttrProp	parallelmode_prop;
	parallelmode_prop.set_description("Changes the parallel mode.<br>\nAvailable parallel modes :<br>\nNON_PARALLEL<br>\nPARALLEL<br>\nSAFE<br>");
	//	label	not set for parallelMode
	//	unit	not set for parallelMode
	//	standard_unit	not set for parallelMode
	//	display_unit	not set for parallelMode
	//	format	not set for parallelMode
	//	max_value	not set for parallelMode
	//	min_value	not set for parallelMode
	//	max_alarm	not set for parallelMode
	//	min_alarm	not set for parallelMode
	//	max_warning	not set for parallelMode
	//	min_warning	not set for parallelMode
	//	delta_t	not set for parallelMode
	//	delta_val	not set for parallelMode
	
	parallelmode->set_default_properties(parallelmode_prop);
	//	Not Polled
	parallelmode->set_disp_level(Tango::OPERATOR);
	parallelmode->set_memorized();
	parallelmode->set_memorized_init(true);
	att_list.push_back(parallelmode);

	//	Attribute : overflowMode
	overflowModeAttrib	*overflowmode = new overflowModeAttrib();
	Tango::UserDefaultAttrProp	overflowmode_prop;
	overflowmode_prop.set_description("When activated, shows saturated for overflow in subframes in 32 bit mode .<br>");
	//	label	not set for overflowMode
	//	unit	not set for overflowMode
	//	standard_unit	not set for overflowMode
	//	display_unit	not set for overflowMode
	//	format	not set for overflowMode
	//	max_value	not set for overflowMode
	//	min_value	not set for overflowMode
	//	max_alarm	not set for overflowMode
	//	min_alarm	not set for overflowMode
	//	max_warning	not set for overflowMode
	//	min_warning	not set for overflowMode
	//	delta_t	not set for overflowMode
	//	delta_val	not set for overflowMode
	
	overflowmode->set_default_properties(overflowmode_prop);
	//	Not Polled
	overflowmode->set_disp_level(Tango::OPERATOR);
	overflowmode->set_memorized();
	overflowmode->set_memorized_init(true);
	att_list.push_back(overflowmode);

	//	Attribute : subFrameExposureTime
	subFrameExposureTimeAttrib	*subframeexposuretime = new subFrameExposureTimeAttrib();
	Tango::UserDefaultAttrProp	subframeexposuretime_prop;
	subframeexposuretime_prop.set_description("Set sub frame exposure time for 32 bit mode .<br>");
	//	label	not set for subFrameExposureTime
	subframeexposuretime_prop.set_unit("ms");
	//	standard_unit	not set for subFrameExposureTime
	//	display_unit	not set for subFrameExposureTime
	subframeexposuretime_prop.set_format("%1.8f");
	//	max_value	not set for subFrameExposureTime
	//	min_value	not set for subFrameExposureTime
	//	max_alarm	not set for subFrameExposureTime
	//	min_alarm	not set for subFrameExposureTime
	//	max_warning	not set for subFrameExposureTime
	//	min_warning	not set for subFrameExposureTime
	//	delta_t	not set for subFrameExposureTime
	//	delta_val	not set for subFrameExposureTime
	
	subframeexposuretime->set_default_properties(subframeexposuretime_prop);
	//	Not Polled
	subframeexposuretime->set_disp_level(Tango::OPERATOR);
	subframeexposuretime->set_memorized();
	subframeexposuretime->set_memorized_init(true);
	att_list.push_back(subframeexposuretime);

	//	Attribute : gainMode
	gainModeAttrib	*gainmode = new gainModeAttrib();
	Tango::UserDefaultAttrProp	gainmode_prop;
	gainmode_prop.set_description("Changes the gain mode.<br>\nAvailable gain modes:<br>\nSTANDARD<br>\nLOW<br>\nMEDIUM<br>\nHIGH<br>\nVERY_HIGH<br>");
	//	label	not set for gainMode
	//	unit	not set for gainMode
	//	standard_unit	not set for gainMode
	//	display_unit	not set for gainMode
	//	format	not set for gainMode
	//	max_value	not set for gainMode
	//	min_value	not set for gainMode
	//	max_alarm	not set for gainMode
	//	min_alarm	not set for gainMode
	//	max_warning	not set for gainMode
	//	min_warning	not set for gainMode
	//	delta_t	not set for gainMode
	//	delta_val	not set for gainMode
	
	gainmode->set_default_properties(gainmode_prop);
	//	Not Polled
	gainmode->set_disp_level(Tango::OPERATOR);
	gainmode->set_memorized();
	gainmode->set_memorized_init(true);
	att_list.push_back(gainmode);

	//	Attribute : thresholdEnergy
	thresholdEnergyAttrib	*thresholdenergy = new thresholdEnergyAttrib();
	Tango::UserDefaultAttrProp	thresholdenergy_prop;
	thresholdenergy_prop.set_description("Get/Set threshold energy for modules in eV.<br>");
	//	label	not set for thresholdEnergy
	thresholdenergy_prop.set_unit("eV");
	//	standard_unit	not set for thresholdEnergy
	//	display_unit	not set for thresholdEnergy
	//	format	not set for thresholdEnergy
	//	max_value	not set for thresholdEnergy
	//	min_value	not set for thresholdEnergy
	//	max_alarm	not set for thresholdEnergy
	//	min_alarm	not set for thresholdEnergy
	//	max_warning	not set for thresholdEnergy
	//	min_warning	not set for thresholdEnergy
	//	delta_t	not set for thresholdEnergy
	//	delta_val	not set for thresholdEnergy
	
	thresholdenergy->set_default_properties(thresholdenergy_prop);
	//	Not Polled
	thresholdenergy->set_disp_level(Tango::OPERATOR);
	thresholdenergy->set_memorized();
	thresholdenergy->set_memorized_init(true);
	att_list.push_back(thresholdenergy);

	//	Attribute : countRateCorrectionActivation
	countRateCorrectionActivationAttrib	*countratecorrectionactivation = new countRateCorrectionActivationAttrib();
	Tango::UserDefaultAttrProp	countratecorrectionactivation_prop;
	countratecorrectionactivation_prop.set_description("Set/get count rate correction activation value.<br>");
	//	label	not set for countRateCorrectionActivation
	//	unit	not set for countRateCorrectionActivation
	//	standard_unit	not set for countRateCorrectionActivation
	//	display_unit	not set for countRateCorrectionActivation
	//	format	not set for countRateCorrectionActivation
	//	max_value	not set for countRateCorrectionActivation
	//	min_value	not set for countRateCorrectionActivation
	//	max_alarm	not set for countRateCorrectionActivation
	//	min_alarm	not set for countRateCorrectionActivation
	//	max_warning	not set for countRateCorrectionActivation
	//	min_warning	not set for countRateCorrectionActivation
	//	delta_t	not set for countRateCorrectionActivation
	//	delta_val	not set for countRateCorrectionActivation
	
	countratecorrectionactivation->set_default_properties(countratecorrectionactivation_prop);
	//	Not Polled
	countratecorrectionactivation->set_disp_level(Tango::OPERATOR);
	countratecorrectionactivation->set_memorized();
	countratecorrectionactivation->set_memorized_init(true);
	att_list.push_back(countratecorrectionactivation);

	//	Attribute : countRateCorrection
	countRateCorrectionAttrib	*countratecorrection = new countRateCorrectionAttrib();
	Tango::UserDefaultAttrProp	countratecorrection_prop;
	countratecorrection_prop.set_description("Get count rate correction in ns.<br>\nWhen the count rate correction is disabled, the value will be 0.<br>");
	//	label	not set for countRateCorrection
	countratecorrection_prop.set_unit("ns");
	//	standard_unit	not set for countRateCorrection
	//	display_unit	not set for countRateCorrection
	//	format	not set for countRateCorrection
	//	max_value	not set for countRateCorrection
	//	min_value	not set for countRateCorrection
	//	max_alarm	not set for countRateCorrection
	//	min_alarm	not set for countRateCorrection
	//	max_warning	not set for countRateCorrection
	//	min_warning	not set for countRateCorrection
	//	delta_t	not set for countRateCorrection
	//	delta_val	not set for countRateCorrection
	
	countratecorrection->set_default_properties(countratecorrection_prop);
	//	Not Polled
	countratecorrection->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(countratecorrection);

	//	Attribute : gapPixelsActivation
	gapPixelsActivationAttrib	*gappixelsactivation = new gapPixelsActivationAttrib();
	Tango::UserDefaultAttrProp	gappixelsactivation_prop;
	gappixelsactivation_prop.set_description("Set/get gap pixels management activation value.<br>");
	//	label	not set for gapPixelsActivation
	gappixelsactivation_prop.set_unit(" ");
	//	standard_unit	not set for gapPixelsActivation
	gappixelsactivation_prop.set_display_unit(" ");
	//	format	not set for gapPixelsActivation
	//	max_value	not set for gapPixelsActivation
	//	min_value	not set for gapPixelsActivation
	//	max_alarm	not set for gapPixelsActivation
	//	min_alarm	not set for gapPixelsActivation
	//	max_warning	not set for gapPixelsActivation
	//	min_warning	not set for gapPixelsActivation
	//	delta_t	not set for gapPixelsActivation
	//	delta_val	not set for gapPixelsActivation
	
	gappixelsactivation->set_default_properties(gappixelsactivation_prop);
	//	Not Polled
	gappixelsactivation->set_disp_level(Tango::OPERATOR);
	gappixelsactivation->set_memorized();
	gappixelsactivation->set_memorized_init(true);
	att_list.push_back(gappixelsactivation);

	//	Attribute : edgePixelsCorrection
	edgePixelsCorrectionAttrib	*edgepixelscorrection = new edgePixelsCorrectionAttrib();
	Tango::UserDefaultAttrProp	edgepixelscorrection_prop;
	edgepixelscorrection_prop.set_description("Set/get the coefficient used for the correction of edge pixels values.<br>\nIndeed, the physical pixels at the border of the chips in the sensor are double in size.<br>\nThe coefficient value will be close to 2.0 but must be tweaked by taking into account<br>\nthe threshold energy.<br>\nThis attribute is used when the gapPixelsActivation is enabled.<br>");
	//	label	not set for edgePixelsCorrection
	edgepixelscorrection_prop.set_unit(" ");
	//	standard_unit	not set for edgePixelsCorrection
	edgepixelscorrection_prop.set_display_unit(" ");
	//	format	not set for edgePixelsCorrection
	//	max_value	not set for edgePixelsCorrection
	edgepixelscorrection_prop.set_min_value("1.0");
	//	max_alarm	not set for edgePixelsCorrection
	//	min_alarm	not set for edgePixelsCorrection
	//	max_warning	not set for edgePixelsCorrection
	//	min_warning	not set for edgePixelsCorrection
	//	delta_t	not set for edgePixelsCorrection
	//	delta_val	not set for edgePixelsCorrection
	
	edgepixelscorrection->set_default_properties(edgepixelscorrection_prop);
	//	Not Polled
	edgepixelscorrection->set_disp_level(Tango::OPERATOR);
	edgepixelscorrection->set_memorized();
	edgepixelscorrection->set_memorized_init(true);
	att_list.push_back(edgepixelscorrection);

	//	Attribute : cornerPixelsCorrection
	cornerPixelsCorrectionAttrib	*cornerpixelscorrection = new cornerPixelsCorrectionAttrib();
	Tango::UserDefaultAttrProp	cornerpixelscorrection_prop;
	cornerpixelscorrection_prop.set_description("Set/get the coefficient used for the correction of corner pixels values.<br>\nIndeed, the physical pixels in the corner between chips are four-times the normal size.<br>\nThe coefficient value will be close to 4.0 but must be tweaked by taking into account<br>\nthe threshold energy.<br>\nThis attribute is used when the gapPixelsActivation is enabled.<br>");
	//	label	not set for cornerPixelsCorrection
	cornerpixelscorrection_prop.set_unit(" ");
	//	standard_unit	not set for cornerPixelsCorrection
	cornerpixelscorrection_prop.set_display_unit(" ");
	//	format	not set for cornerPixelsCorrection
	//	max_value	not set for cornerPixelsCorrection
	cornerpixelscorrection_prop.set_min_value("1.0");
	//	max_alarm	not set for cornerPixelsCorrection
	//	min_alarm	not set for cornerPixelsCorrection
	//	max_warning	not set for cornerPixelsCorrection
	//	min_warning	not set for cornerPixelsCorrection
	//	delta_t	not set for cornerPixelsCorrection
	//	delta_val	not set for cornerPixelsCorrection
	
	cornerpixelscorrection->set_default_properties(cornerpixelscorrection_prop);
	//	Not Polled
	cornerpixelscorrection->set_disp_level(Tango::OPERATOR);
	cornerpixelscorrection->set_memorized();
	cornerpixelscorrection->set_memorized_init(true);
	att_list.push_back(cornerpixelscorrection);

	//	Attribute : configFileName
	configFileNameAttrib	*configfilename = new configFileNameAttrib();
	Tango::UserDefaultAttrProp	configfilename_prop;
	//	description	not set for configFileName
	//	label	not set for configFileName
	//	unit	not set for configFileName
	//	standard_unit	not set for configFileName
	//	display_unit	not set for configFileName
	//	format	not set for configFileName
	//	max_value	not set for configFileName
	//	min_value	not set for configFileName
	//	max_alarm	not set for configFileName
	//	min_alarm	not set for configFileName
	//	max_warning	not set for configFileName
	//	min_warning	not set for configFileName
	//	delta_t	not set for configFileName
	//	delta_val	not set for configFileName
	
	configfilename->set_default_properties(configfilename_prop);
	//	Not Polled
	configfilename->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(configfilename);

	//	Attribute : detectorFirmwareVersion
	detectorFirmwareVersionAttrib	*detectorfirmwareversion = new detectorFirmwareVersionAttrib();
	Tango::UserDefaultAttrProp	detectorfirmwareversion_prop;
	detectorfirmwareversion_prop.set_description("Get detector firmware version.");
	detectorfirmwareversion_prop.set_label("Detector firmware version");
	//	unit	not set for detectorFirmwareVersion
	//	standard_unit	not set for detectorFirmwareVersion
	//	display_unit	not set for detectorFirmwareVersion
	//	format	not set for detectorFirmwareVersion
	//	max_value	not set for detectorFirmwareVersion
	//	min_value	not set for detectorFirmwareVersion
	//	max_alarm	not set for detectorFirmwareVersion
	//	min_alarm	not set for detectorFirmwareVersion
	//	max_warning	not set for detectorFirmwareVersion
	//	min_warning	not set for detectorFirmwareVersion
	//	delta_t	not set for detectorFirmwareVersion
	//	delta_val	not set for detectorFirmwareVersion
	
	detectorfirmwareversion->set_default_properties(detectorfirmwareversion_prop);
	//	Not Polled
	detectorfirmwareversion->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(detectorfirmwareversion);

	//	Attribute : detectorSoftwareVersion
	detectorSoftwareVersionAttrib	*detectorsoftwareversion = new detectorSoftwareVersionAttrib();
	Tango::UserDefaultAttrProp	detectorsoftwareversion_prop;
	detectorsoftwareversion_prop.set_description("Get detector software version.");
	detectorsoftwareversion_prop.set_label("Detector software version");
	//	unit	not set for detectorSoftwareVersion
	//	standard_unit	not set for detectorSoftwareVersion
	//	display_unit	not set for detectorSoftwareVersion
	//	format	not set for detectorSoftwareVersion
	//	max_value	not set for detectorSoftwareVersion
	//	min_value	not set for detectorSoftwareVersion
	//	max_alarm	not set for detectorSoftwareVersion
	//	min_alarm	not set for detectorSoftwareVersion
	//	max_warning	not set for detectorSoftwareVersion
	//	min_warning	not set for detectorSoftwareVersion
	//	delta_t	not set for detectorSoftwareVersion
	//	delta_val	not set for detectorSoftwareVersion
	
	detectorsoftwareversion->set_default_properties(detectorsoftwareversion_prop);
	//	Not Polled
	detectorsoftwareversion->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(detectorsoftwareversion);

	//	Attribute : tempFpga1
	tempFpga1Attrib	*tempfpga1 = new tempFpga1Attrib();
	Tango::UserDefaultAttrProp	tempfpga1_prop;
	tempfpga1_prop.set_description("Get temperature of hardware element (fpga) for first module in millidegree Celsius.<br>");
	//	label	not set for tempFpga1
	tempfpga1_prop.set_unit("mC");
	//	standard_unit	not set for tempFpga1
	//	display_unit	not set for tempFpga1
	//	format	not set for tempFpga1
	//	max_value	not set for tempFpga1
	//	min_value	not set for tempFpga1
	//	max_alarm	not set for tempFpga1
	//	min_alarm	not set for tempFpga1
	//	max_warning	not set for tempFpga1
	//	min_warning	not set for tempFpga1
	//	delta_t	not set for tempFpga1
	//	delta_val	not set for tempFpga1
	
	tempfpga1->set_default_properties(tempfpga1_prop);
	//	Not Polled
	tempfpga1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpga1);

	//	Attribute : tempFpga2
	tempFpga2Attrib	*tempfpga2 = new tempFpga2Attrib();
	Tango::UserDefaultAttrProp	tempfpga2_prop;
	tempfpga2_prop.set_description("Get temperature of hardware element (fpga) for second module in millidegree Celsius.<br>");
	//	label	not set for tempFpga2
	tempfpga2_prop.set_unit("mC");
	//	standard_unit	not set for tempFpga2
	//	display_unit	not set for tempFpga2
	//	format	not set for tempFpga2
	//	max_value	not set for tempFpga2
	//	min_value	not set for tempFpga2
	//	max_alarm	not set for tempFpga2
	//	min_alarm	not set for tempFpga2
	//	max_warning	not set for tempFpga2
	//	min_warning	not set for tempFpga2
	//	delta_t	not set for tempFpga2
	//	delta_val	not set for tempFpga2
	
	tempfpga2->set_default_properties(tempfpga2_prop);
	//	Not Polled
	tempfpga2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpga2);

	//	Attribute : tempFpgaext1
	tempFpgaext1Attrib	*tempfpgaext1 = new tempFpgaext1Attrib();
	Tango::UserDefaultAttrProp	tempfpgaext1_prop;
	tempfpgaext1_prop.set_description("Get temperature of hardware element (close to the fpga) for first module in millidegree Celsius.<br>");
	//	label	not set for tempFpgaext1
	tempfpgaext1_prop.set_unit("mC");
	//	standard_unit	not set for tempFpgaext1
	//	display_unit	not set for tempFpgaext1
	//	format	not set for tempFpgaext1
	//	max_value	not set for tempFpgaext1
	//	min_value	not set for tempFpgaext1
	//	max_alarm	not set for tempFpgaext1
	//	min_alarm	not set for tempFpgaext1
	//	max_warning	not set for tempFpgaext1
	//	min_warning	not set for tempFpgaext1
	//	delta_t	not set for tempFpgaext1
	//	delta_val	not set for tempFpgaext1
	
	tempfpgaext1->set_default_properties(tempfpgaext1_prop);
	//	Not Polled
	tempfpgaext1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpgaext1);

	//	Attribute : tempFpgaext2
	tempFpgaext2Attrib	*tempfpgaext2 = new tempFpgaext2Attrib();
	Tango::UserDefaultAttrProp	tempfpgaext2_prop;
	tempfpgaext2_prop.set_description("Get temperature of hardware element (close to the fpga) for second module in millidegree Celsius.<br>");
	//	label	not set for tempFpgaext2
	tempfpgaext2_prop.set_unit("mC");
	//	standard_unit	not set for tempFpgaext2
	//	display_unit	not set for tempFpgaext2
	//	format	not set for tempFpgaext2
	//	max_value	not set for tempFpgaext2
	//	min_value	not set for tempFpgaext2
	//	max_alarm	not set for tempFpgaext2
	//	min_alarm	not set for tempFpgaext2
	//	max_warning	not set for tempFpgaext2
	//	min_warning	not set for tempFpgaext2
	//	delta_t	not set for tempFpgaext2
	//	delta_val	not set for tempFpgaext2
	
	tempfpgaext2->set_default_properties(tempfpgaext2_prop);
	//	Not Polled
	tempfpgaext2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpgaext2);

	//	Attribute : temp10ge1
	temp10ge1Attrib	*temp10ge1 = new temp10ge1Attrib();
	Tango::UserDefaultAttrProp	temp10ge1_prop;
	temp10ge1_prop.set_description("Get temperature of hardware element (close to the 10GE) for first module in millidegree Celsius.<br>");
	//	label	not set for temp10ge1
	temp10ge1_prop.set_unit("mC");
	//	standard_unit	not set for temp10ge1
	//	display_unit	not set for temp10ge1
	//	format	not set for temp10ge1
	//	max_value	not set for temp10ge1
	//	min_value	not set for temp10ge1
	//	max_alarm	not set for temp10ge1
	//	min_alarm	not set for temp10ge1
	//	max_warning	not set for temp10ge1
	//	min_warning	not set for temp10ge1
	//	delta_t	not set for temp10ge1
	//	delta_val	not set for temp10ge1
	
	temp10ge1->set_default_properties(temp10ge1_prop);
	//	Not Polled
	temp10ge1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(temp10ge1);

	//	Attribute : temp10ge2
	temp10ge2Attrib	*temp10ge2 = new temp10ge2Attrib();
	Tango::UserDefaultAttrProp	temp10ge2_prop;
	temp10ge2_prop.set_description("Get temperature of hardware element (close to the 10GE) for second module in millidegree Celsius.<br>");
	//	label	not set for temp10ge2
	temp10ge2_prop.set_unit("mC");
	//	standard_unit	not set for temp10ge2
	//	display_unit	not set for temp10ge2
	//	format	not set for temp10ge2
	//	max_value	not set for temp10ge2
	//	min_value	not set for temp10ge2
	//	max_alarm	not set for temp10ge2
	//	min_alarm	not set for temp10ge2
	//	max_warning	not set for temp10ge2
	//	min_warning	not set for temp10ge2
	//	delta_t	not set for temp10ge2
	//	delta_val	not set for temp10ge2
	
	temp10ge2->set_default_properties(temp10ge2_prop);
	//	Not Polled
	temp10ge2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(temp10ge2);

	//	Attribute : tempDcdc1
	tempDcdc1Attrib	*tempdcdc1 = new tempDcdc1Attrib();
	Tango::UserDefaultAttrProp	tempdcdc1_prop;
	tempdcdc1_prop.set_description("Get temperature of hardware element (close to the dc dc converter) for first module in millidegree Celsius.<br>");
	//	label	not set for tempDcdc1
	tempdcdc1_prop.set_unit("mC");
	//	standard_unit	not set for tempDcdc1
	//	display_unit	not set for tempDcdc1
	//	format	not set for tempDcdc1
	//	max_value	not set for tempDcdc1
	//	min_value	not set for tempDcdc1
	//	max_alarm	not set for tempDcdc1
	//	min_alarm	not set for tempDcdc1
	//	max_warning	not set for tempDcdc1
	//	min_warning	not set for tempDcdc1
	//	delta_t	not set for tempDcdc1
	//	delta_val	not set for tempDcdc1
	
	tempdcdc1->set_default_properties(tempdcdc1_prop);
	//	Not Polled
	tempdcdc1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempdcdc1);

	//	Attribute : tempDcdc2
	tempDcdc2Attrib	*tempdcdc2 = new tempDcdc2Attrib();
	Tango::UserDefaultAttrProp	tempdcdc2_prop;
	tempdcdc2_prop.set_description("Get temperature of hardware element (close to the dc dc converter) for second module in millidegree Celsius.<br>");
	//	label	not set for tempDcdc2
	tempdcdc2_prop.set_unit("mC");
	//	standard_unit	not set for tempDcdc2
	//	display_unit	not set for tempDcdc2
	//	format	not set for tempDcdc2
	//	max_value	not set for tempDcdc2
	//	min_value	not set for tempDcdc2
	//	max_alarm	not set for tempDcdc2
	//	min_alarm	not set for tempDcdc2
	//	max_warning	not set for tempDcdc2
	//	min_warning	not set for tempDcdc2
	//	delta_t	not set for tempDcdc2
	//	delta_val	not set for tempDcdc2
	
	tempdcdc2->set_default_properties(tempdcdc2_prop);
	//	Not Polled
	tempdcdc2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempdcdc2);

	//	Attribute : tempSodl1
	tempSodl1Attrib	*tempsodl1 = new tempSodl1Attrib();
	Tango::UserDefaultAttrProp	tempsodl1_prop;
	tempsodl1_prop.set_description("Get temperature of hardware element (close to the left so-dimm memory) for first module in millidegree Celsius.<br>");
	//	label	not set for tempSodl1
	tempsodl1_prop.set_unit("mC");
	//	standard_unit	not set for tempSodl1
	//	display_unit	not set for tempSodl1
	//	format	not set for tempSodl1
	//	max_value	not set for tempSodl1
	//	min_value	not set for tempSodl1
	//	max_alarm	not set for tempSodl1
	//	min_alarm	not set for tempSodl1
	//	max_warning	not set for tempSodl1
	//	min_warning	not set for tempSodl1
	//	delta_t	not set for tempSodl1
	//	delta_val	not set for tempSodl1
	
	tempsodl1->set_default_properties(tempsodl1_prop);
	//	Not Polled
	tempsodl1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempsodl1);

	//	Attribute : tempSodl2
	tempSodl2Attrib	*tempsodl2 = new tempSodl2Attrib();
	Tango::UserDefaultAttrProp	tempsodl2_prop;
	tempsodl2_prop.set_description("Get temperature of hardware element (close to the left so-dimm memory) for second module in millidegree Celsius.<br>");
	//	label	not set for tempSodl2
	tempsodl2_prop.set_unit("mC");
	//	standard_unit	not set for tempSodl2
	//	display_unit	not set for tempSodl2
	//	format	not set for tempSodl2
	//	max_value	not set for tempSodl2
	//	min_value	not set for tempSodl2
	//	max_alarm	not set for tempSodl2
	//	min_alarm	not set for tempSodl2
	//	max_warning	not set for tempSodl2
	//	min_warning	not set for tempSodl2
	//	delta_t	not set for tempSodl2
	//	delta_val	not set for tempSodl2
	
	tempsodl2->set_default_properties(tempsodl2_prop);
	//	Not Polled
	tempsodl2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempsodl2);

	//	Attribute : tempSodr1
	tempSodr1Attrib	*tempsodr1 = new tempSodr1Attrib();
	Tango::UserDefaultAttrProp	tempsodr1_prop;
	tempsodr1_prop.set_description("Get temperature of hardware element (close to the right so-dimm memory) for first module in millidegree Celsius.<br>");
	//	label	not set for tempSodr1
	tempsodr1_prop.set_unit("mC");
	//	standard_unit	not set for tempSodr1
	//	display_unit	not set for tempSodr1
	//	format	not set for tempSodr1
	//	max_value	not set for tempSodr1
	//	min_value	not set for tempSodr1
	//	max_alarm	not set for tempSodr1
	//	min_alarm	not set for tempSodr1
	//	max_warning	not set for tempSodr1
	//	min_warning	not set for tempSodr1
	//	delta_t	not set for tempSodr1
	//	delta_val	not set for tempSodr1
	
	tempsodr1->set_default_properties(tempsodr1_prop);
	//	Not Polled
	tempsodr1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempsodr1);

	//	Attribute : tempSodr2
	tempSodr2Attrib	*tempsodr2 = new tempSodr2Attrib();
	Tango::UserDefaultAttrProp	tempsodr2_prop;
	tempsodr2_prop.set_description("Get temperature of hardware element (close to the right so-dimm memory) for second module in millidegree Celsius.<br>");
	//	label	not set for tempSodr2
	tempsodr2_prop.set_unit("mC");
	//	standard_unit	not set for tempSodr2
	//	display_unit	not set for tempSodr2
	//	format	not set for tempSodr2
	//	max_value	not set for tempSodr2
	//	min_value	not set for tempSodr2
	//	max_alarm	not set for tempSodr2
	//	min_alarm	not set for tempSodr2
	//	max_warning	not set for tempSodr2
	//	min_warning	not set for tempSodr2
	//	delta_t	not set for tempSodr2
	//	delta_val	not set for tempSodr2
	
	tempsodr2->set_default_properties(tempsodr2_prop);
	//	Not Polled
	tempsodr2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempsodr2);

	//	Attribute : tempFpgafl1
	tempFpgafl1Attrib	*tempfpgafl1 = new tempFpgafl1Attrib();
	Tango::UserDefaultAttrProp	tempfpgafl1_prop;
	tempfpgafl1_prop.set_description("Get temperature of hardware element (left front end board fpga) for first module in millidegree Celsius.<br>");
	//	label	not set for tempFpgafl1
	tempfpgafl1_prop.set_unit("mC");
	//	standard_unit	not set for tempFpgafl1
	//	display_unit	not set for tempFpgafl1
	//	format	not set for tempFpgafl1
	//	max_value	not set for tempFpgafl1
	//	min_value	not set for tempFpgafl1
	//	max_alarm	not set for tempFpgafl1
	//	min_alarm	not set for tempFpgafl1
	//	max_warning	not set for tempFpgafl1
	//	min_warning	not set for tempFpgafl1
	//	delta_t	not set for tempFpgafl1
	//	delta_val	not set for tempFpgafl1
	
	tempfpgafl1->set_default_properties(tempfpgafl1_prop);
	//	Not Polled
	tempfpgafl1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpgafl1);

	//	Attribute : tempFpgafl2
	tempFpgafl2Attrib	*tempfpgafl2 = new tempFpgafl2Attrib();
	Tango::UserDefaultAttrProp	tempfpgafl2_prop;
	tempfpgafl2_prop.set_description("Get temperature of hardware element (left front end board fpga) for second module in millidegree Celsius.<br>");
	//	label	not set for tempFpgafl2
	tempfpgafl2_prop.set_unit("mC");
	//	standard_unit	not set for tempFpgafl2
	//	display_unit	not set for tempFpgafl2
	//	format	not set for tempFpgafl2
	//	max_value	not set for tempFpgafl2
	//	min_value	not set for tempFpgafl2
	//	max_alarm	not set for tempFpgafl2
	//	min_alarm	not set for tempFpgafl2
	//	max_warning	not set for tempFpgafl2
	//	min_warning	not set for tempFpgafl2
	//	delta_t	not set for tempFpgafl2
	//	delta_val	not set for tempFpgafl2
	
	tempfpgafl2->set_default_properties(tempfpgafl2_prop);
	//	Not Polled
	tempfpgafl2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpgafl2);

	//	Attribute : tempFpgafr1
	tempFpgafr1Attrib	*tempfpgafr1 = new tempFpgafr1Attrib();
	Tango::UserDefaultAttrProp	tempfpgafr1_prop;
	tempfpgafr1_prop.set_description("Get temperature of hardware element (right front end board fpga) for first module in millidegree Celsius.<br>");
	//	label	not set for tempFpgafr1
	tempfpgafr1_prop.set_unit("mC");
	//	standard_unit	not set for tempFpgafr1
	//	display_unit	not set for tempFpgafr1
	//	format	not set for tempFpgafr1
	//	max_value	not set for tempFpgafr1
	//	min_value	not set for tempFpgafr1
	//	max_alarm	not set for tempFpgafr1
	//	min_alarm	not set for tempFpgafr1
	//	max_warning	not set for tempFpgafr1
	//	min_warning	not set for tempFpgafr1
	//	delta_t	not set for tempFpgafr1
	//	delta_val	not set for tempFpgafr1
	
	tempfpgafr1->set_default_properties(tempfpgafr1_prop);
	//	Not Polled
	tempfpgafr1->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpgafr1);

	//	Attribute : tempFpgafr2
	tempFpgafr2Attrib	*tempfpgafr2 = new tempFpgafr2Attrib();
	Tango::UserDefaultAttrProp	tempfpgafr2_prop;
	tempfpgafr2_prop.set_description("Get temperature of hardware element (right front end board fpga) for second module in millidegree Celsius.<br>");
	//	label	not set for tempFpgafr2
	tempfpgafr2_prop.set_unit("mC");
	//	standard_unit	not set for tempFpgafr2
	//	display_unit	not set for tempFpgafr2
	//	format	not set for tempFpgafr2
	//	max_value	not set for tempFpgafr2
	//	min_value	not set for tempFpgafr2
	//	max_alarm	not set for tempFpgafr2
	//	min_alarm	not set for tempFpgafr2
	//	max_warning	not set for tempFpgafr2
	//	min_warning	not set for tempFpgafr2
	//	delta_t	not set for tempFpgafr2
	//	delta_val	not set for tempFpgafr2
	
	tempfpgafr2->set_default_properties(tempfpgafr2_prop);
	//	Not Polled
	tempfpgafr2->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(tempfpgafr2);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(SlsEigerClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void SlsEigerClass::command_factory()
{
	/*----- PROTECTED REGION ID(SlsEigerClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::command_factory_before


	//	Command SetCmd
	SetCmdClass	*pSetCmdCmd =
		new SetCmdClass("SetCmd",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"SlsDetector command",
			"SlsDetector response",
			Tango::EXPERT);
	command_list.push_back(pSetCmdCmd);

	//	Command GetCmd
	GetCmdClass	*pGetCmdCmd =
		new GetCmdClass("GetCmd",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"SlsDetector command",
			"SlsDetector response",
			Tango::EXPERT);
	command_list.push_back(pGetCmdCmd);

	/*----- PROTECTED REGION ID(SlsEigerClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		SlsEigerClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void SlsEigerClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(SlsEigerClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		SlsEigerClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void SlsEigerClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		SlsEiger *dev = static_cast<SlsEiger *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(SlsEigerClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : SlsEigerClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *SlsEigerClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(SlsEigerClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	SlsEigerClass::Additional Methods
} //	namespace

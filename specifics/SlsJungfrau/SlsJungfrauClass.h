/*----- PROTECTED REGION ID(SlsJungfrauClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        SlsJungfrauClass.h
//
// description : Include for the SlsJungfrau root class.
//               This class is the singleton class for
//                the SlsJungfrau device class.
//               It contains all properties and methods which the 
//               SlsJungfrau requires only once e.g. the commands.
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SlsJungfrauClass_H
#define SlsJungfrauClass_H

#include <tango.h>
#include <SlsJungfrau.h>


/*----- PROTECTED REGION END -----*/	//	SlsJungfrauClass.h


namespace SlsJungfrau_ns
{
/*----- PROTECTED REGION ID(SlsJungfrauClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	SlsJungfrauClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute clockDivider class definition
class clockDividerAttrib: public Tango::Attr
{
public:
	clockDividerAttrib():Attr("clockDivider",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~clockDividerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_clockDivider(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsJungfrau *>(dev))->write_clockDivider(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_clockDivider_allowed(ty);}
};

//	Attribute configFileName class definition
class configFileNameAttrib: public Tango::Attr
{
public:
	configFileNameAttrib():Attr("configFileName",
			Tango::DEV_STRING, Tango::READ) {};
	~configFileNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_configFileName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_configFileName_allowed(ty);}
};

//	Attribute delayAfterTrigger class definition
class delayAfterTriggerAttrib: public Tango::Attr
{
public:
	delayAfterTriggerAttrib():Attr("delayAfterTrigger",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~delayAfterTriggerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_delayAfterTrigger(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsJungfrau *>(dev))->write_delayAfterTrigger(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_delayAfterTrigger_allowed(ty);}
};

//	Attribute detectorFirmwareVersion class definition
class detectorFirmwareVersionAttrib: public Tango::Attr
{
public:
	detectorFirmwareVersionAttrib():Attr("detectorFirmwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~detectorFirmwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_detectorFirmwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_detectorFirmwareVersion_allowed(ty);}
};

//	Attribute detectorSoftwareVersion class definition
class detectorSoftwareVersionAttrib: public Tango::Attr
{
public:
	detectorSoftwareVersionAttrib():Attr("detectorSoftwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~detectorSoftwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_detectorSoftwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_detectorSoftwareVersion_allowed(ty);}
};

//	Attribute gainMode class definition
class gainModeAttrib: public Tango::Attr
{
public:
	gainModeAttrib():Attr("gainMode",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~gainModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_gainMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SlsJungfrau *>(dev))->write_gainMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_gainMode_allowed(ty);}
};

//	Attribute gainCoeffsFileName class definition
class gainCoeffsFileNameAttrib: public Tango::Attr
{
public:
	gainCoeffsFileNameAttrib():Attr("gainCoeffsFileName",
			Tango::DEV_STRING, Tango::READ) {};
	~gainCoeffsFileNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_gainCoeffsFileName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_gainCoeffsFileName_allowed(ty);}
};

//	Attribute pedestalFileName1 class definition
class pedestalFileName1Attrib: public Tango::Attr
{
public:
	pedestalFileName1Attrib():Attr("pedestalFileName1",
			Tango::DEV_STRING, Tango::READ) {};
	~pedestalFileName1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_pedestalFileName1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_pedestalFileName1_allowed(ty);}
};

//	Attribute pedestalFileName2 class definition
class pedestalFileName2Attrib: public Tango::Attr
{
public:
	pedestalFileName2Attrib():Attr("pedestalFileName2",
			Tango::DEV_STRING, Tango::READ) {};
	~pedestalFileName2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_pedestalFileName2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_pedestalFileName2_allowed(ty);}
};

//	Attribute pedestalFileName3 class definition
class pedestalFileName3Attrib: public Tango::Attr
{
public:
	pedestalFileName3Attrib():Attr("pedestalFileName3",
			Tango::DEV_STRING, Tango::READ) {};
	~pedestalFileName3Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_pedestalFileName3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_pedestalFileName3_allowed(ty);}
};

//	Attribute gainCoeffsState class definition
class gainCoeffsStateAttrib: public Tango::Attr
{
public:
	gainCoeffsStateAttrib():Attr("gainCoeffsState",
			Tango::DEV_STRING, Tango::READ) {};
	~gainCoeffsStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_gainCoeffsState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_gainCoeffsState_allowed(ty);}
};

//	Attribute calibrationState class definition
class calibrationStateAttrib: public Tango::Attr
{
public:
	calibrationStateAttrib():Attr("calibrationState",
			Tango::DEV_STRING, Tango::READ) {};
	~calibrationStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_calibrationState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_calibrationState_allowed(ty);}
};

//	Attribute gainCoeffs1 class definition
class gainCoeffs1Attrib: public Tango::ImageAttr
{
public:
	gainCoeffs1Attrib():ImageAttr("gainCoeffs1",
			Tango::DEV_DOUBLE, Tango::READ, 1024, 512) {};
	~gainCoeffs1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_gainCoeffs1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_gainCoeffs1_allowed(ty);}
};

//	Attribute gainCoeffs2 class definition
class gainCoeffs2Attrib: public Tango::ImageAttr
{
public:
	gainCoeffs2Attrib():ImageAttr("gainCoeffs2",
			Tango::DEV_DOUBLE, Tango::READ, 1024, 512) {};
	~gainCoeffs2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_gainCoeffs2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_gainCoeffs2_allowed(ty);}
};

//	Attribute gainCoeffs3 class definition
class gainCoeffs3Attrib: public Tango::ImageAttr
{
public:
	gainCoeffs3Attrib():ImageAttr("gainCoeffs3",
			Tango::DEV_DOUBLE, Tango::READ, 1024, 512) {};
	~gainCoeffs3Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_gainCoeffs3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_gainCoeffs3_allowed(ty);}
};

//	Attribute pedestal1 class definition
class pedestal1Attrib: public Tango::ImageAttr
{
public:
	pedestal1Attrib():ImageAttr("pedestal1",
			Tango::DEV_USHORT, Tango::READ, 1024, 512) {};
	~pedestal1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_pedestal1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_pedestal1_allowed(ty);}
};

//	Attribute pedestal2 class definition
class pedestal2Attrib: public Tango::ImageAttr
{
public:
	pedestal2Attrib():ImageAttr("pedestal2",
			Tango::DEV_USHORT, Tango::READ, 1024, 512) {};
	~pedestal2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_pedestal2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_pedestal2_allowed(ty);}
};

//	Attribute pedestal3 class definition
class pedestal3Attrib: public Tango::ImageAttr
{
public:
	pedestal3Attrib():ImageAttr("pedestal3",
			Tango::DEV_USHORT, Tango::READ, 1024, 512) {};
	~pedestal3Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SlsJungfrau *>(dev))->read_pedestal3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SlsJungfrau *>(dev))->is_pedestal3_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command SetCmd class definition
class SetCmdClass : public Tango::Command
{
public:
	SetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SlsJungfrau *>(dev))->is_SetCmd_allowed(any);}
};

//	Command GetCmd class definition
class GetCmdClass : public Tango::Command
{
public:
	GetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SlsJungfrau *>(dev))->is_GetCmd_allowed(any);}
};

//	Command ResetCamera class definition
class ResetCameraClass : public Tango::Command
{
public:
	ResetCameraClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetCameraClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetCameraClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SlsJungfrau *>(dev))->is_ResetCamera_allowed(any);}
};

//	Command Calibrate class definition
class CalibrateClass : public Tango::Command
{
public:
	CalibrateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CalibrateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CalibrateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SlsJungfrau *>(dev))->is_Calibrate_allowed(any);}
};


/**
 *	The SlsJungfrauClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SlsJungfrauClass : public Tango::DeviceClass
#else
class SlsJungfrauClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SlsJungfrauClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SlsJungfrauClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static SlsJungfrauClass *init(const char *);
		static SlsJungfrauClass *instance();
		~SlsJungfrauClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		SlsJungfrauClass(string &);
		static SlsJungfrauClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	SlsJungfrau_H

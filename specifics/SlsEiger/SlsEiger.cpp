/*----- PROTECTED REGION ID(SlsEiger.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        SlsEiger.cpp
//
// description : C++ source for the SlsEiger class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               SlsEiger are implemented in this file.
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SlsEiger.h>
#include <SlsEigerClass.h>

// SYSTEM
#include <map>
#include <string>

//- YAT/YAT4TANGO
#include <yat4tango/InnerAppender.h>

/*----- PROTECTED REGION END -----*/	//	SlsEiger.cpp

/**
 *  SlsEiger class description:
 *    Device for sls detectors from PSI. 
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  SetCmd        |  set_cmd
//  GetCmd        |  get_cmd
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  clockDivider                   |  Tango::DevString	Scalar
//  parallelMode                   |  Tango::DevString	Scalar
//  overflowMode                   |  Tango::DevBoolean	Scalar
//  subFrameExposureTime           |  Tango::DevDouble	Scalar
//  gainMode                       |  Tango::DevString	Scalar
//  thresholdEnergy                |  Tango::DevLong	Scalar
//  countRateCorrectionActivation  |  Tango::DevBoolean	Scalar
//  countRateCorrection            |  Tango::DevLong	Scalar
//  gapPixelsActivation            |  Tango::DevBoolean	Scalar
//  edgePixelsCorrection           |  Tango::DevDouble	Scalar
//  cornerPixelsCorrection         |  Tango::DevDouble	Scalar
//  configFileName                 |  Tango::DevString	Scalar
//  detectorFirmwareVersion        |  Tango::DevString	Scalar
//  detectorSoftwareVersion        |  Tango::DevString	Scalar
//  tempFpga1                      |  Tango::DevLong	Scalar
//  tempFpga2                      |  Tango::DevLong	Scalar
//  tempFpgaext1                   |  Tango::DevLong	Scalar
//  tempFpgaext2                   |  Tango::DevLong	Scalar
//  temp10ge1                      |  Tango::DevLong	Scalar
//  temp10ge2                      |  Tango::DevLong	Scalar
//  tempDcdc1                      |  Tango::DevLong	Scalar
//  tempDcdc2                      |  Tango::DevLong	Scalar
//  tempSodl1                      |  Tango::DevLong	Scalar
//  tempSodl2                      |  Tango::DevLong	Scalar
//  tempSodr1                      |  Tango::DevLong	Scalar
//  tempSodr2                      |  Tango::DevLong	Scalar
//  tempFpgafl1                    |  Tango::DevLong	Scalar
//  tempFpgafl2                    |  Tango::DevLong	Scalar
//  tempFpgafr1                    |  Tango::DevLong	Scalar
//  tempFpgafr2                    |  Tango::DevLong	Scalar
//  gapPixelsActivation            |  Tango::DevBoolean	Scalar
//================================================================

namespace SlsEiger_ns
{
/*----- PROTECTED REGION ID(SlsEiger::namespace_starting) ENABLED START -----*/

//	static initializations
//-------------------------------------------------------------------------
// CLOCK DIVIDER
//-------------------------------------------------------------------------
static const std::vector<std::string> TANGO_CLOCK_DIVIDER_LABELS{"FULL_SPEED", "HALF_SPEED", "QUARTER_SPEED", "SUPER_SLOW_SPEED" }; // labels of clock divider

std::vector<enum lima::SlsEiger::ClockDivider> TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE{lima::SlsEiger::ClockDivider::FullSpeed     ,
                                                                                  lima::SlsEiger::ClockDivider::HalfSpeed     ,
                                                                                  lima::SlsEiger::ClockDivider::QuarterSpeed  ,
                                                                                  lima::SlsEiger::ClockDivider::SuperSlowSpeed};

//-------------------------------------------------------------------------
// PARALLEL MODE
//-------------------------------------------------------------------------
static const std::vector<std::string> TANGO_PARALLEL_MODE_LABELS{"NON_PARALLEL", "PARALLEL", "SAFE" }; // labels of parallel mode

std::vector<enum lima::SlsEiger::ParallelMode> TANGO_PARALLEL_MODE_LABELS_TO_TYPE{lima::SlsEiger::ParallelMode::NonParallel,
                                                                                  lima::SlsEiger::ParallelMode::Parallel   ,
                                                                                  lima::SlsEiger::ParallelMode::Safe       };

//-------------------------------------------------------------------------
// GAIN MODE
//-------------------------------------------------------------------------
static const std::vector<std::string> TANGO_GAIN_MODE_LABELS{"STANDARD", "LOW", "MEDIUM", "HIGH", "VERY_HIGH", "UNDEFINED"}; // labels of gain mode

std::vector<enum lima::SlsEiger::GainMode> TANGO_GAIN_MODE_LABELS_TO_TYPE{lima::SlsEiger::GainMode::standard ,
                                                                          lima::SlsEiger::GainMode::low      ,
                                                                          lima::SlsEiger::GainMode::medium   ,
                                                                          lima::SlsEiger::GainMode::high     ,
                                                                          lima::SlsEiger::GainMode::very_high,
                                                                          lima::SlsEiger::GainMode::undefined};
/*----- PROTECTED REGION END -----*/	//	SlsEiger::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::SlsEiger()
 *	Description : Constructors for a Tango device
 *                implementing the classSlsEiger
 */
//--------------------------------------------------------
SlsEiger::SlsEiger(Tango::DeviceClass *cl, string &s)
 : Tango::Device_4Impl(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(SlsEiger::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::constructor_1
}
//--------------------------------------------------------
SlsEiger::SlsEiger(Tango::DeviceClass *cl, const char *s)
 : Tango::Device_4Impl(cl, s)
{
	/*----- PROTECTED REGION ID(SlsEiger::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::constructor_2
}
//--------------------------------------------------------
SlsEiger::SlsEiger(Tango::DeviceClass *cl, const char *s, const char *d)
 : Tango::Device_4Impl(cl, s, d)
{
	/*----- PROTECTED REGION ID(SlsEiger::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void SlsEiger::delete_device()
{
	DEBUG_STREAM << "SlsEiger::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsEiger::delete_device) ENABLED START -----*/

    INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);

    if(!m_is_device_initialized )
        return;

    delete[] attr_clockDivider_read           [0];
    delete[] attr_configFileName_read         [0];
    delete[] attr_detectorFirmwareVersion_read[0];
    delete[] attr_detectorSoftwareVersion_read[0];
    delete[] attr_parallelMode_read           [0];
    delete[] attr_gainMode_read               [0];

	/*----- PROTECTED REGION END -----*/	//	SlsEiger::delete_device
	delete[] attr_clockDivider_read;
	delete[] attr_parallelMode_read;
	delete[] attr_overflowMode_read;
	delete[] attr_subFrameExposureTime_read;
	delete[] attr_gainMode_read;
	delete[] attr_thresholdEnergy_read;
	delete[] attr_countRateCorrectionActivation_read;
	delete[] attr_countRateCorrection_read;
	delete[] attr_gapPixelsActivation_read;
	delete[] attr_edgePixelsCorrection_read;
	delete[] attr_cornerPixelsCorrection_read;
	delete[] attr_configFileName_read;
	delete[] attr_detectorFirmwareVersion_read;
	delete[] attr_detectorSoftwareVersion_read;
	delete[] attr_tempFpga1_read;
	delete[] attr_tempFpga2_read;
	delete[] attr_tempFpgaext1_read;
	delete[] attr_tempFpgaext2_read;
	delete[] attr_temp10ge1_read;
	delete[] attr_temp10ge2_read;
	delete[] attr_tempDcdc1_read;
	delete[] attr_tempDcdc2_read;
	delete[] attr_tempSodl1_read;
	delete[] attr_tempSodl2_read;
	delete[] attr_tempSodr1_read;
	delete[] attr_tempSodr2_read;
	delete[] attr_tempFpgafl1_read;
	delete[] attr_tempFpgafl2_read;
	delete[] attr_tempFpgafr1_read;
	delete[] attr_tempFpgafr2_read;
}

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void SlsEiger::init_device()
{
	DEBUG_STREAM << "SlsEiger::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsEiger::init_device_before) ENABLED START -----*/
	INFO_STREAM << "SlsEiger::init_device() create device " << device_name << endl;

    m_is_device_initialized = false;
    set_state(Tango::INIT);
    m_status_message.str("");

    INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

	try
	{
		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("SlsEiger");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::SlsEiger::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
	}
	catch(Exception& e)
	{
        // we should create the properties even if there is a problem
        get_device_property();

        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		ERROR_STREAM << m_status_message.str();
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
        // we should create the properties even if there is a problem
        get_device_property();

        m_status_message << "Initialization Failed : UNKNOWN" << endl;
		ERROR_STREAM << m_status_message.str();
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_clockDivider_read = new Tango::DevString[1];
	attr_parallelMode_read = new Tango::DevString[1];
	attr_overflowMode_read = new Tango::DevBoolean[1];
	attr_subFrameExposureTime_read = new Tango::DevDouble[1];
	attr_gainMode_read = new Tango::DevString[1];
	attr_thresholdEnergy_read = new Tango::DevLong[1];
	attr_countRateCorrectionActivation_read = new Tango::DevBoolean[1];
	attr_countRateCorrection_read = new Tango::DevLong[1];
	attr_gapPixelsActivation_read = new Tango::DevBoolean[1];
	attr_edgePixelsCorrection_read = new Tango::DevDouble[1];
	attr_cornerPixelsCorrection_read = new Tango::DevDouble[1];
	attr_configFileName_read = new Tango::DevString[1];
	attr_detectorFirmwareVersion_read = new Tango::DevString[1];
	attr_detectorSoftwareVersion_read = new Tango::DevString[1];
	attr_tempFpga1_read = new Tango::DevLong[1];
	attr_tempFpga2_read = new Tango::DevLong[1];
	attr_tempFpgaext1_read = new Tango::DevLong[1];
	attr_tempFpgaext2_read = new Tango::DevLong[1];
	attr_temp10ge1_read = new Tango::DevLong[1];
	attr_temp10ge2_read = new Tango::DevLong[1];
	attr_tempDcdc1_read = new Tango::DevLong[1];
	attr_tempDcdc2_read = new Tango::DevLong[1];
	attr_tempSodl1_read = new Tango::DevLong[1];
	attr_tempSodl2_read = new Tango::DevLong[1];
	attr_tempSodr1_read = new Tango::DevLong[1];
	attr_tempSodr2_read = new Tango::DevLong[1];
	attr_tempFpgafl1_read = new Tango::DevLong[1];
	attr_tempFpgafl2_read = new Tango::DevLong[1];
	attr_tempFpgafr1_read = new Tango::DevLong[1];
	attr_tempFpgafr2_read = new Tango::DevLong[1];

	/*----- PROTECTED REGION ID(SlsEiger::init_device) ENABLED START -----*/
    attr_clockDivider_read           [0] = new char[ 256];
    attr_configFileName_read         [0] = new char[1024];
    attr_detectorFirmwareVersion_read[0] = new char[ 256];
    attr_detectorSoftwareVersion_read[0] = new char[ 256];
    attr_parallelMode_read           [0] = new char[ 256];
    attr_gainMode_read               [0] = new char[ 256];

    ::strcpy(attr_clockDivider_read           [0], "");
    ::strcpy(attr_configFileName_read         [0], "");
    ::strcpy(attr_detectorFirmwareVersion_read[0], "");
    ::strcpy(attr_detectorSoftwareVersion_read[0], "");
    ::strcpy(attr_parallelMode_read           [0], "");
    ::strcpy(attr_gainMode_read               [0], "");
        
    //	Initialize device
	m_is_device_initialized = true;
	set_state(Tango::STANDBY);
	dev_state();	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::init_device
}

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void SlsEiger::get_device_property()
{
	/*----- PROTECTED REGION ID(SlsEiger::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConfigFileName"));
	dev_prop.push_back(Tango::DbDatum("ExpertReadoutTime"));
	dev_prop.push_back(Tango::DbDatum("ExpertReceiverFifoDepth"));
	dev_prop.push_back(Tango::DbDatum("ExpertFramePacketNumber8"));
	dev_prop.push_back(Tango::DbDatum("ExpertFramePacketNumber16"));
	dev_prop.push_back(Tango::DbDatum("ExpertFramePacketNumber32"));
	dev_prop.push_back(Tango::DbDatum("ExpertLiveModeMinFramePeriodSec"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on SlsEigerClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		SlsEigerClass	*ds_class =
			(static_cast<SlsEigerClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ConfigFileName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  configFileName;
		else {
			//	Try to initialize ConfigFileName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  configFileName;
		}
		//	And try to extract ConfigFileName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configFileName;

		//	Try to initialize ExpertReadoutTime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  expertReadoutTime;
		else {
			//	Try to initialize ExpertReadoutTime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  expertReadoutTime;
		}
		//	And try to extract ExpertReadoutTime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertReadoutTime;

		//	Try to initialize ExpertReceiverFifoDepth from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  expertReceiverFifoDepth;
		else {
			//	Try to initialize ExpertReceiverFifoDepth from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  expertReceiverFifoDepth;
		}
		//	And try to extract ExpertReceiverFifoDepth value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertReceiverFifoDepth;

		//	Try to initialize ExpertFramePacketNumber8 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  expertFramePacketNumber8;
		else {
			//	Try to initialize ExpertFramePacketNumber8 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  expertFramePacketNumber8;
		}
		//	And try to extract ExpertFramePacketNumber8 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertFramePacketNumber8;

		//	Try to initialize ExpertFramePacketNumber16 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  expertFramePacketNumber16;
		else {
			//	Try to initialize ExpertFramePacketNumber16 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  expertFramePacketNumber16;
		}
		//	And try to extract ExpertFramePacketNumber16 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertFramePacketNumber16;

		//	Try to initialize ExpertFramePacketNumber32 from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  expertFramePacketNumber32;
		else {
			//	Try to initialize ExpertFramePacketNumber32 from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  expertFramePacketNumber32;
		}
		//	And try to extract ExpertFramePacketNumber32 value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertFramePacketNumber32;

		//	Try to initialize ExpertLiveModeMinFramePeriodSec from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  expertLiveModeMinFramePeriodSec;
		else {
			//	Try to initialize ExpertLiveModeMinFramePeriodSec from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  expertLiveModeMinFramePeriodSec;
		}
		//	And try to extract ExpertLiveModeMinFramePeriodSec value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertLiveModeMinFramePeriodSec;

	}

	/*----- PROTECTED REGION ID(SlsEiger::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, ""       , "ConfigFileName"                 );
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "0.00004", "ExpertReadoutTime"              ); // 40�s by default
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "8000"   , "ExpertReceiverFifoDepth"        ); // 8000 frames by default
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "32"     , "ExpertFramePacketNumber8"       ); // 32 packets by default for 8bits
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "64"     , "ExpertFramePacketNumber16"      ); // 64 packets by default for 16bits
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "128"    , "ExpertFramePacketNumber32"      ); // 128 packets by default for 32bits
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "1.0"    , "ExpertLiveModeMinFramePeriodSec"); // 1 second by default
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void SlsEiger::always_executed_hook()
{
	DEBUG_STREAM << "SlsEiger::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsEiger::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
    try
    {
        m_status_message.str("");

		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("SlsEiger");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::SlsEiger::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
        
        //update state
        dev_state();
    }
    catch (Exception& e)
    {
        m_status_message << "always_executed_hook : " << e.getErrMsg() << endl;
        ERROR_STREAM << m_status_message.str();
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        m_status_message << "always_executed_hook : UNKNOWN" << endl;
        ERROR_STREAM << m_status_message.str();
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void SlsEiger::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SlsEiger::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : SlsEiger::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void SlsEiger::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SlsEiger::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute clockDivider related method
 *	Description: Changes the readout clock.<br>
 *               Available clock Divider :<br>
 *               FULL_SPEED (equivalent to the 0 sls value)<br>
 *               HALF_SPEED (equivalent to the 1 sls value)<br>
 *               QUARTER_SPEED (equivalent to the 2 sls value)<br>
 *               SUPER_SLOW_SPEED (currently not used)<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_clockDivider(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_clockDivider(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_clockDivider) ENABLED START -----*/

    try
    {
        enum lima::SlsEiger::ClockDivider clock_divider;

        clock_divider = m_camera->getClockDivider();

        const std::vector<enum lima::SlsEiger::ClockDivider>::const_iterator 
        iterator = find(TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.begin(), 
                        TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.end  (),
                        clock_divider                             );

        // found it
        if (iterator != TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.end()) 
        {
            // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
            bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

            string clock_divider_label = TANGO_CLOCK_DIVIDER_LABELS[iterator - TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.begin()]; // calculation gives the index

            //Set the attribute value
            strcpy(*attr_clockDivider_read, clock_divider_label.c_str());
            attr.set_value(attr_clockDivider_read);
            attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
        }
        else
        {
            std::ostringstream MsgErr;
            MsgErr << "Impossible to found the clock divider mode " << clock_divider << std::endl;

            Tango::Except::throw_exception("LOGIC_ERROR",
                                           MsgErr.str().c_str(),
                                           "SlsEiger::read_clockDivider");
        }
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_clockDivider");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_clockDivider");
    }

	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_clockDivider
}
//--------------------------------------------------------
/**
 *	Write attribute clockDivider related method
 *	Description: Changes the readout clock.<br>
 *               Available clock Divider :<br>
 *               FULL_SPEED (equivalent to the 0 sls value)<br>
 *               HALF_SPEED (equivalent to the 1 sls value)<br>
 *               QUARTER_SPEED (equivalent to the 2 sls value)<br>
 *               SUPER_SLOW_SPEED (currently not used)<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_clockDivider(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_clockDivider(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_clockDivider) ENABLED START -----*/
	
    // we need to convert the clock divider string to the hardware clock divider
    enum lima::SlsEiger::ClockDivider clock_divider;

    const std::vector<string>::const_iterator 
    iterator = find(TANGO_CLOCK_DIVIDER_LABELS.begin(), 
                    TANGO_CLOCK_DIVIDER_LABELS.end  (),
                    string(w_val)                    );

    // found it
    if (iterator != TANGO_CLOCK_DIVIDER_LABELS.end()) 
    {
        clock_divider = TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE[iterator - TANGO_CLOCK_DIVIDER_LABELS.begin()]; // calculation gives the index
    }
    else
    {
        std::stringstream message;
        message.str("");
        message << "Incorrect clock divider : " << w_val << std::endl;
        message << "Available clock divider modes are :" << std::endl;

        for(size_t index = 0 ; index < TANGO_CLOCK_DIVIDER_LABELS.size() ; index++)
        {
            message << TANGO_CLOCK_DIVIDER_LABELS[index] << std::endl;
        }

        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       message.str().c_str(), 
                                       "Controller::write_clockDivider()");
    }

    try
    {
        // set the camera value
        m_camera->setClockDivider(clock_divider);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_clockDivider");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_clockDivider");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_clockDivider
}
//--------------------------------------------------------
/**
 *	Read attribute parallelMode related method
 *	Description: Changes the parallel mode.<br>
 *               Available parallel modes :<br>
 *               NON_PARALLEL<br>
 *               PARALLEL<br>
 *               SAFE<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_parallelMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_parallelMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_parallelMode) ENABLED START -----*/

    try
    {
        enum lima::SlsEiger::ParallelMode parallel_mode;

        parallel_mode = m_camera->getParallelMode();

        const std::vector<enum lima::SlsEiger::ParallelMode>::const_iterator 
        iterator = find(TANGO_PARALLEL_MODE_LABELS_TO_TYPE.begin(), 
                        TANGO_PARALLEL_MODE_LABELS_TO_TYPE.end  (),
                        parallel_mode                             );

        // found it
        if (iterator != TANGO_PARALLEL_MODE_LABELS_TO_TYPE.end()) 
        {
            // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
            bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

            string parallel_mode_label = TANGO_PARALLEL_MODE_LABELS[iterator - TANGO_PARALLEL_MODE_LABELS_TO_TYPE.begin()]; // calculation gives the index

            //Set the attribute value
            strcpy(*attr_parallelMode_read, parallel_mode_label.c_str());
            attr.set_value(attr_parallelMode_read);
            attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
        }
        else
        {
            std::ostringstream MsgErr;
            MsgErr << "Impossible to found the parallel mode " << parallel_mode << std::endl;

            Tango::Except::throw_exception("LOGIC_ERROR",
                                           MsgErr.str().c_str(),
                                           "SlsEiger::read_parallelMode");
        }
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_parallelMode");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_parallelMode");
    }

    /*----- PROTECTED REGION END -----*/	//	SlsEiger::read_parallelMode
}
//--------------------------------------------------------
/**
 *	Write attribute parallelMode related method
 *	Description: Changes the parallel mode.<br>
 *               Available parallel modes :<br>
 *               NON_PARALLEL<br>
 *               PARALLEL<br>
 *               SAFE<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_parallelMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_parallelMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_parallelMode) ENABLED START -----*/
	
    // we need to convert the parallel mode string to the hardware clock divider
    enum lima::SlsEiger::ParallelMode parallel_mode;

    const std::vector<string>::const_iterator 
    iterator = find(TANGO_PARALLEL_MODE_LABELS.begin(), 
                    TANGO_PARALLEL_MODE_LABELS.end  (),
                    string(w_val)                    );

    // found it
    if (iterator != TANGO_PARALLEL_MODE_LABELS.end()) 
    {
        parallel_mode = TANGO_PARALLEL_MODE_LABELS_TO_TYPE[iterator - TANGO_PARALLEL_MODE_LABELS.begin()]; // calculation gives the index
    }
    else
    {
        std::stringstream message;
        message.str("");
        message << "Incorrect parallel mode : " << w_val << std::endl;
        message << "Available parallel mode modes are :" << std::endl;

        for(size_t index = 0 ; index < TANGO_PARALLEL_MODE_LABELS.size() ; index++)
        {
            message << TANGO_PARALLEL_MODE_LABELS[index] << std::endl;
        }

        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       message.str().c_str(), 
                                       "Controller::write_clockDivider()");
    }

    try
    {
        // set the camera value
        m_camera->setParallelMode(parallel_mode);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_parallelMode");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_parallelMode");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_parallelMode
}
//--------------------------------------------------------
/**
 *	Read attribute overflowMode related method
 *	Description: When activated, shows saturated for overflow in subframes in 32 bit mode .<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_overflowMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_overflowMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_overflowMode) ENABLED START -----*/

    try
    {
        // Set the attribute value
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

        // get the camera value
        bool overflow_mode = m_camera->getOverflowMode();

        // set the attribute value
        *attr_overflowMode_read = (Tango::DevBoolean)(overflow_mode);
        attr.set_value(attr_overflowMode_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_overflowMode");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_overflowMode");
    }
    
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_overflowMode
}
//--------------------------------------------------------
/**
 *	Write attribute overflowMode related method
 *	Description: When activated, shows saturated for overflow in subframes in 32 bit mode .<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_overflowMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_overflowMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_overflowMode) ENABLED START -----*/
	
    try
    {
        // set the camera value
        m_camera->setOverflowMode(static_cast<bool>(w_val));
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_overflowMode");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_overflowMode");
    }	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_overflowMode
}
//--------------------------------------------------------
/**
 *	Read attribute subFrameExposureTime related method
 *	Description: Set sub frame exposure time for 32 bit mode .<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_subFrameExposureTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_subFrameExposureTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_subFrameExposureTime) ENABLED START -----*/

    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

        // get the camera value
        // converting sub frame exposure time because 
        // - camera sub frame exposure time is in seconds
        // - lima delays are in ms
        double sub_frame_exposure_time = m_camera->getSubFrameExposureTime() * 1000.0;

        // set the attribute value
        *attr_subFrameExposureTime_read = (Tango::DevDouble)(sub_frame_exposure_time);
        attr.set_value(attr_subFrameExposureTime_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_subFrameExposureTime");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_subFrameExposureTime");
    }
    
    /*----- PROTECTED REGION END -----*/	//	SlsEiger::read_subFrameExposureTime
}
//--------------------------------------------------------
/**
 *	Write attribute subFrameExposureTime related method
 *	Description: Set sub frame exposure time for 32 bit mode .<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_subFrameExposureTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_subFrameExposureTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_subFrameExposureTime) ENABLED START -----*/
	
    try
    {
        // set the camera value
        // converting sub frame exposure time because 
        // - camera sub frame exposure time is in seconds
        // - lima delays are in ms
        m_camera->setSubFrameExposureTime(static_cast<double>(w_val) / 1000.0);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_subFrameExposureTime");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_subFrameExposureTime");
    }	

	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_subFrameExposureTime
}
//--------------------------------------------------------
/**
 *	Read attribute gainMode related method
 *	Description: Changes the gain mode.<br>
 *               Available gain modes:<br>
 *               STANDARD<br>
 *               LOW<br>
 *               MEDIUM<br>
 *               HIGH<br>
 *               VERY_HIGH<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_gainMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_gainMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_gainMode) ENABLED START -----*/
    try
    {
        enum lima::SlsEiger::GainMode gain_mode;
        gain_mode = m_camera->getGainMode();
        const std::vector<enum lima::SlsEiger::GainMode>::const_iterator 
        iterator = find(TANGO_GAIN_MODE_LABELS_TO_TYPE.begin(), 
                        TANGO_GAIN_MODE_LABELS_TO_TYPE.end  (),
                        gain_mode                            );
        // found it
        if (iterator != TANGO_GAIN_MODE_LABELS_TO_TYPE.end()) 
        {
            // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
            bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

            string gain_mode_label = TANGO_GAIN_MODE_LABELS[iterator - TANGO_GAIN_MODE_LABELS_TO_TYPE.begin()]; // calculation gives the index

            //Set the attribute value
            strcpy(*attr_gainMode_read, gain_mode_label.c_str());
            attr.set_value(attr_gainMode_read);
            attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
        }
        else
        {
            std::ostringstream MsgErr;
            MsgErr << "Impossible to found the gain mode " << gain_mode << std::endl;

            Tango::Except::throw_exception("LOGIC_ERROR",
                                           MsgErr.str().c_str(),
                                           "SlsEiger::read_gainMode");
        }
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_gainMode");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_gainMode");
    }
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_gainMode
}
//--------------------------------------------------------
/**
 *	Write attribute gainMode related method
 *	Description: Changes the gain mode.<br>
 *               Available gain modes:<br>
 *               STANDARD<br>
 *               LOW<br>
 *               MEDIUM<br>
 *               HIGH<br>
 *               VERY_HIGH<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_gainMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_gainMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_gainMode) ENABLED START -----*/
	
    // we need to convert the gain mode string to the hardware clock divider
    enum lima::SlsEiger::GainMode gain_mode;
    const std::vector<string>::const_iterator 
    iterator = find(TANGO_GAIN_MODE_LABELS.begin(), 
                    TANGO_GAIN_MODE_LABELS.end  (),
                    string(w_val)                 );
    // found it
    if (iterator != TANGO_GAIN_MODE_LABELS.end()) 
    {
        gain_mode = TANGO_GAIN_MODE_LABELS_TO_TYPE[iterator - TANGO_GAIN_MODE_LABELS.begin()]; // calculation gives the index
    }
    else
    {
        std::stringstream message;
        message.str("");
        message << "Incorrect gain mode : " << w_val << std::endl;
        message << "Available gain modes are :" << std::endl;

        for(size_t index = 0 ; index < TANGO_GAIN_MODE_LABELS.size() ; index++)
        {
            message << TANGO_GAIN_MODE_LABELS[index] << std::endl;
        }

        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       message.str().c_str(), 
                                       "SlsEiger::write_gainMode()");
    }
    try
    {
        // set the camera value
        m_camera->setGainMode(gain_mode);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_gainMode");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_gainMode");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_gainMode
}
//--------------------------------------------------------
/**
 *	Read attribute thresholdEnergy related method
 *	Description: Get/Set threshold energy for modules in eV.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_thresholdEnergy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_thresholdEnergy(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_thresholdEnergy) ENABLED START -----*/
    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);
        // get the camera value
        int threshold_energy = m_camera->getThresholdEnergy();
        // set the attribute value
        *attr_thresholdEnergy_read = (Tango::DevLong)(threshold_energy);
        attr.set_value(attr_thresholdEnergy_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_thresholdEnergy");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_thresholdEnergy");
    }
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_thresholdEnergy
}
//--------------------------------------------------------
/**
 *	Write attribute thresholdEnergy related method
 *	Description: Get/Set threshold energy for modules in eV.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_thresholdEnergy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_thresholdEnergy(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_thresholdEnergy) ENABLED START -----*/
	
    try
    {
        // set the camera value
        m_camera->setThresholdEnergy(static_cast<int>(w_val));
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_thresholdEnergy");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_thresholdEnergy");
    }	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_thresholdEnergy
}
//--------------------------------------------------------
/**
 *	Read attribute countRateCorrectionActivation related method
 *	Description: Set/get count rate correction activation value.<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_countRateCorrectionActivation(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_countRateCorrectionActivation(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_countRateCorrectionActivation) ENABLED START -----*/
    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);
        // get the camera value
        bool count_rate_correction_activation = m_camera->getCountRateCorrectionActivation();
        // set the attribute value
        *attr_countRateCorrectionActivation_read = (Tango::DevBoolean)(count_rate_correction_activation);
        attr.set_value(attr_countRateCorrectionActivation_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_countRateCorrectionActivation");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_countRateCorrectionActivation");
    }
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_countRateCorrectionActivation
}
//--------------------------------------------------------
/**
 *	Write attribute countRateCorrectionActivation related method
 *	Description: Set/get count rate correction activation value.<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_countRateCorrectionActivation(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_countRateCorrectionActivation(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_countRateCorrectionActivation) ENABLED START -----*/
	
    try
    {
        // set the camera value
        m_camera->setCountRateCorrectionActivation(static_cast<bool>(w_val));
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_countRateCorrectionActivation");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_countRateCorrectionActivation");
    }	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_countRateCorrectionActivation
}
//--------------------------------------------------------
/**
 *	Read attribute countRateCorrection related method
 *	Description: Get count rate correction in ns.<br>
 *               When the count rate correction is disabled, the value will be 0.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_countRateCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_countRateCorrection(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_countRateCorrection) ENABLED START -----*/

    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

        // get the camera value
        int count_rate_correction = m_camera->getCountRateCorrection();

        // set the attribute value
        *attr_countRateCorrection_read = (Tango::DevLong)(count_rate_correction);
        attr.set_value(attr_countRateCorrection_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_countRateCorrection");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_countRateCorrection");
    }

	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_countRateCorrection
}
//--------------------------------------------------------
/**
 *	Read attribute gapPixelsActivation related method
 *	Description: Set/get gap pixels management activation value.<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_gapPixelsActivation(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_gapPixelsActivation(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_gapPixelsActivation) ENABLED START -----*/
    try
    {
        // get the camera value
        bool enable_gap_pixels = m_camera->getEnableGapPixels();
        // set the attribute value
        *attr_gapPixelsActivation_read = (Tango::DevBoolean)(enable_gap_pixels);
        attr.set_value(attr_gapPixelsActivation_read);
        attr.set_quality(Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_gapPixelsActivation");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_gapPixelsActivation");
    }
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_gapPixelsActivation
}
//--------------------------------------------------------
/**
 *	Write attribute gapPixelsActivation related method
 *	Description: Set/get gap pixels management activation value.<br>
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_gapPixelsActivation(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_gapPixelsActivation(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_gapPixelsActivation) ENABLED START -----*/
	
    try
    {
        // set the camera value
        m_camera->setEnableGapPixels(static_cast<bool>(w_val));
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_gapPixelsActivation");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_gapPixelsActivation");
    }	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_gapPixelsActivation
}
//--------------------------------------------------------
/**
 *	Read attribute edgePixelsCorrection related method
 *	Description: Set/get the coefficient used for the correction of edge pixels values.<br>
 *               Indeed, the physical pixels at the border of the chips in the sensor are double in size.<br>
 *               The coefficient value will be close to 2.0 but must be tweaked by taking into account<br>
 *               the threshold energy.<br>
 *               This attribute is used when the gapPixelsActivation is enabled.<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_edgePixelsCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_edgePixelsCorrection(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_edgePixelsCorrection) ENABLED START -----*/

    try
    {
        // get the camera value
        double edge_pixels_correction = m_camera->getEdgePixelsCorrection();

        // set the attribute value
        *attr_edgePixelsCorrection_read = (Tango::DevDouble)(edge_pixels_correction);
        attr.set_value(attr_edgePixelsCorrection_read);
        attr.set_quality(Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_edgePixelsCorrection");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_edgePixelsCorrection");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_edgePixelsCorrection
}
//--------------------------------------------------------
/**
 *	Write attribute edgePixelsCorrection related method
 *	Description: Set/get the coefficient used for the correction of edge pixels values.<br>
 *               Indeed, the physical pixels at the border of the chips in the sensor are double in size.<br>
 *               The coefficient value will be close to 2.0 but must be tweaked by taking into account<br>
 *               the threshold energy.<br>
 *               This attribute is used when the gapPixelsActivation is enabled.<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_edgePixelsCorrection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_edgePixelsCorrection(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_edgePixelsCorrection) ENABLED START -----*/
	
    try
    {
        // set the camera value
        m_camera->setEdgePixelsCorrection(static_cast<double>(w_val));
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_edgePixelsCorrection");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_edgePixelsCorrection");
    }	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_edgePixelsCorrection
}
//--------------------------------------------------------
/**
 *	Read attribute cornerPixelsCorrection related method
 *	Description: Set/get the coefficient used for the correction of corner pixels values.<br>
 *               Indeed, the physical pixels in the corner between chips are four-times the normal size.<br>
 *               The coefficient value will be close to 4.0 but must be tweaked by taking into account<br>
 *               the threshold energy.<br>
 *               This attribute is used when the gapPixelsActivation is enabled.<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_cornerPixelsCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_cornerPixelsCorrection(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_cornerPixelsCorrection) ENABLED START -----*/
	
    try
    {
        // get the camera value
        double corner_pixels_correction = m_camera->getCornerPixelsCorrection();

        // set the attribute value
        *attr_cornerPixelsCorrection_read = (Tango::DevDouble)(corner_pixels_correction);
        attr.set_value(attr_cornerPixelsCorrection_read);
        attr.set_quality(Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_cornerPixelsCorrection");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_cornerPixelsCorrection");
    }

	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_cornerPixelsCorrection
}
//--------------------------------------------------------
/**
 *	Write attribute cornerPixelsCorrection related method
 *	Description: Set/get the coefficient used for the correction of corner pixels values.<br>
 *               Indeed, the physical pixels in the corner between chips are four-times the normal size.<br>
 *               The coefficient value will be close to 4.0 but must be tweaked by taking into account<br>
 *               the threshold energy.<br>
 *               This attribute is used when the gapPixelsActivation is enabled.<br>
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::write_cornerPixelsCorrection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsEiger::write_cornerPixelsCorrection(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsEiger::write_cornerPixelsCorrection) ENABLED START -----*/
	
    try
    {
        // set the camera value
        m_camera->setCornerPixelsCorrection(static_cast<double>(w_val));
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::write_cornerPixelsCorrection");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::write_cornerPixelsCorrection");
    }	
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::write_cornerPixelsCorrection
}
//--------------------------------------------------------
/**
 *	Read attribute configFileName related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_configFileName(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_configFileName(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_configFileName) ENABLED START -----*/
	
    try
    {
        //Set the attribute value
        strcpy(*attr_configFileName_read, configFileName.c_str());
        attr.set_value(attr_configFileName_read);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_configFileName");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_configFileName");
    }

	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_configFileName
}
//--------------------------------------------------------
/**
 *	Read attribute detectorFirmwareVersion related method
 *	Description: Get detector firmware version.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_detectorFirmwareVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_detectorFirmwareVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_detectorFirmwareVersion) ENABLED START -----*/
	//	Set the attribute value
    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

        // get the camera data
        std::string version = m_camera->getDetectorFirmwareVersion();

        //Set the attribute value
        strcpy(*attr_detectorFirmwareVersion_read, version.c_str());
        attr.set_value(attr_detectorFirmwareVersion_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_detectorFirmwareVersion");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_detectorFirmwareVersion");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_detectorFirmwareVersion
}
//--------------------------------------------------------
/**
 *	Read attribute detectorSoftwareVersion related method
 *	Description: Get detector software version.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_detectorSoftwareVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_detectorSoftwareVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_detectorSoftwareVersion) ENABLED START -----*/
	//	Set the attribute value
    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

        // get the camera data
        std::string version = m_camera->getDetectorSoftwareVersion();

        //Set the attribute value
        strcpy(*attr_detectorSoftwareVersion_read, version.c_str());
        attr.set_value(attr_detectorSoftwareVersion_read);
        attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::read_detectorSoftwareVersion");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::read_detectorSoftwareVersion");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_detectorSoftwareVersion
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpga1 related method
 *	Description: Get temperature of hardware element (fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpga1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpga1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpga1) ENABLED START -----*/

    read_temp(attr, attr_tempFpga1_read, lima::SlsEiger::Temperature::hw_fpga, 0, std::string("SlsEiger::read_tempFpga1"));

    /*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpga1
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpga2 related method
 *	Description: Get temperature of hardware element (fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpga2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpga2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpga2) ENABLED START -----*/

    read_temp(attr, attr_tempFpga2_read, lima::SlsEiger::Temperature::hw_fpga, 1, std::string("SlsEiger::read_tempFpga2"));
    
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpga2
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpgaext1 related method
 *	Description: Get temperature of hardware element (close to the fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpgaext1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpgaext1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpgaext1) ENABLED START -----*/

    read_temp(attr, attr_tempFpgaext1_read, lima::SlsEiger::Temperature::hw_fpgaext, 0, std::string("SlsEiger::read_tempFpgaext1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpgaext1
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpgaext2 related method
 *	Description: Get temperature of hardware element (close to the fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpgaext2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpgaext2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpgaext2) ENABLED START -----*/

    read_temp(attr, attr_tempFpgaext2_read, lima::SlsEiger::Temperature::hw_fpgaext, 1, std::string("SlsEiger::read_tempFpgaext2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpgaext2
}
//--------------------------------------------------------
/**
 *	Read attribute temp10ge1 related method
 *	Description: Get temperature of hardware element (close to the 10GE) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_temp10ge1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_temp10ge1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_temp10ge1) ENABLED START -----*/

    read_temp(attr, attr_temp10ge1_read, lima::SlsEiger::Temperature::hw_10ge, 0, std::string("SlsEiger::read_temp10ge1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_temp10ge1
}
//--------------------------------------------------------
/**
 *	Read attribute temp10ge2 related method
 *	Description: Get temperature of hardware element (close to the 10GE) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_temp10ge2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_temp10ge2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_temp10ge2) ENABLED START -----*/

    read_temp(attr, attr_temp10ge2_read, lima::SlsEiger::Temperature::hw_10ge, 1, std::string("SlsEiger::read_temp10ge2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_temp10ge2
}
//--------------------------------------------------------
/**
 *	Read attribute tempDcdc1 related method
 *	Description: Get temperature of hardware element (close to the dc dc converter) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempDcdc1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempDcdc1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempDcdc1) ENABLED START -----*/

    read_temp(attr, attr_tempDcdc1_read, lima::SlsEiger::Temperature::hw_dcdc, 0, std::string("SlsEiger::read_tempDcdc1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempDcdc1
}
//--------------------------------------------------------
/**
 *	Read attribute tempDcdc2 related method
 *	Description: Get temperature of hardware element (close to the dc dc converter) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempDcdc2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempDcdc2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempDcdc2) ENABLED START -----*/

    read_temp(attr, attr_tempDcdc2_read, lima::SlsEiger::Temperature::hw_dcdc, 1, std::string("SlsEiger::read_tempDcdc2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempDcdc2
}
//--------------------------------------------------------
/**
 *	Read attribute tempSodl1 related method
 *	Description: Get temperature of hardware element (close to the left so-dimm memory) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempSodl1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempSodl1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempSodl1) ENABLED START -----*/

    read_temp(attr, attr_tempSodl1_read, lima::SlsEiger::Temperature::hw_sodl, 0, std::string("SlsEiger::read_tempSodl1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempSodl1
}
//--------------------------------------------------------
/**
 *	Read attribute tempSodl2 related method
 *	Description: Get temperature of hardware element (close to the left so-dimm memory) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempSodl2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempSodl2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempSodl2) ENABLED START -----*/

    read_temp(attr, attr_tempSodl2_read, lima::SlsEiger::Temperature::hw_sodl, 1, std::string("SlsEiger::read_tempSodl2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempSodl2
}
//--------------------------------------------------------
/**
 *	Read attribute tempSodr1 related method
 *	Description: Get temperature of hardware element (close to the right so-dimm memory) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempSodr1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempSodr1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempSodr1) ENABLED START -----*/

    read_temp(attr, attr_tempSodr1_read, lima::SlsEiger::Temperature::hw_sodr, 0, std::string("SlsEiger::read_tempSodr1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempSodr1
}
//--------------------------------------------------------
/**
 *	Read attribute tempSodr2 related method
 *	Description: Get temperature of hardware element (close to the right so-dimm memory) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempSodr2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempSodr2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempSodr2) ENABLED START -----*/

    read_temp(attr, attr_tempSodr2_read, lima::SlsEiger::Temperature::hw_sodr, 1, std::string("SlsEiger::read_tempSodr2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempSodr2
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpgafl1 related method
 *	Description: Get temperature of hardware element (left front end board fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpgafl1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpgafl1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpgafl1) ENABLED START -----*/
	
    read_temp(attr, attr_tempFpgafl1_read, lima::SlsEiger::Temperature::hw_fpgafl, 0, std::string("SlsEiger::read_tempFpgafl1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpgafl1
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpgafl2 related method
 *	Description: Get temperature of hardware element (left front end board fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpgafl2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpgafl2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpgafl2) ENABLED START -----*/

    read_temp(attr, attr_tempFpgafl2_read, lima::SlsEiger::Temperature::hw_fpgafl, 1, std::string("SlsEiger::read_tempFpgafl2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpgafl2
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpgafr1 related method
 *	Description: Get temperature of hardware element (right front end board fpga) for first module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpgafr1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpgafr1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpgafr1) ENABLED START -----*/
	
    read_temp(attr, attr_tempFpgafr1_read, lima::SlsEiger::Temperature::hw_fpgafr, 0, std::string("SlsEiger::read_tempFpgafr1"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpgafr1
}
//--------------------------------------------------------
/**
 *	Read attribute tempFpgafr2 related method
 *	Description: Get temperature of hardware element (right front end board fpga) for second module in millidegree Celsius.<br>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsEiger::read_tempFpgafr2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsEiger::read_tempFpgafr2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsEiger::read_tempFpgafr2) ENABLED START -----*/

    read_temp(attr, attr_tempFpgafr2_read, lima::SlsEiger::Temperature::hw_fpgafr, 1, std::string("SlsEiger::read_tempFpgafr2"));
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::read_tempFpgafr2
}

//--------------------------------------------------------
/**
 *	Method      : SlsEiger::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void SlsEiger::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(SlsEiger::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command SetCmd related method
 *	Description: Allows to execute a line command (set type)
 *
 *	@param argin SlsDetector command
 *	@returns SlsDetector response
 */
//--------------------------------------------------------
Tango::DevString SlsEiger::set_cmd(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "SlsEiger::SetCmd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsEiger::set_cmd) ENABLED START -----*/
	
    try
    {
        std::string result = m_camera->setCmd(std::string(argin));

        argout = new char[result.size() + 1];

        if (result.size() > 0)
        {
            result.copy(argout, result.size());
        }

        argout[result.size()] = '\0';
	}
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::SetCmd");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::SetCmd");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::set_cmd
	return argout;
}
//--------------------------------------------------------
/**
 *	Command GetCmd related method
 *	Description: Allows to execute a line command (get type)
 *
 *	@param argin SlsDetector command
 *	@returns SlsDetector response
 */
//--------------------------------------------------------
Tango::DevString SlsEiger::get_cmd(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "SlsEiger::GetCmd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsEiger::get_cmd) ENABLED START -----*/
	
    try
    {
        std::string result = m_camera->getCmd(std::string(argin));

        argout = new char[result.size() + 1];

        if (result.size() > 0)
        {
            result.copy(argout, result.size());
        }

        argout[result.size()] = '\0';
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, "SlsEiger::GetCmd");
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, "SlsEiger::GetCmd");
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsEiger::get_cmd
	return argout;
}

/*----- PROTECTED REGION ID(SlsEiger::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	SlsEiger::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState SlsEiger::dev_state()
{
    Tango::DevState	argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "SlsEiger::dev_state(): entering... !" << endl;

    // Add your own code to control device here
    stringstream    DeviceStatus;
    DeviceStatus     << "";
    Tango::DevState DeviceState    = Tango::STANDBY;
    if(!m_is_device_initialized )
    {
        DeviceState  = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        // state & status are retrieved from Factory, Factory is updated by Generic device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state (DeviceState);
    set_status(DeviceStatus.str());

    return DeviceState;
}

//+------------------------------------------------------------------
/**
 *	method:	SlsEiger::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
//+------------------------------------------------------------------
void SlsEiger::manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name)
{
    ERROR_STREAM << in_exception << endl;
	
    // rethrow exception
    Tango::Except::re_throw_exception(in_exception,
                                      "TANGO_DEVICE_ERROR",
                                      string(in_exception.errors[0].desc).c_str(),
                                      in_caller_method_name.c_str());
}

//+------------------------------------------------------------------
/**
 *	method:	SlsEiger::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
//+------------------------------------------------------------------
void SlsEiger::manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name)
{
    ERROR_STREAM << in_exception.getErrMsg() << endl;

    // throw exception
    Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                   in_exception.getErrMsg().c_str(),
                                   in_caller_method_name.c_str());
}

//+------------------------------------------------------------------
/**
 *	method:	SlsEiger::read_temp
 *
 *	description: method which manages the temperature reading of 
 *               the hardware part for a module 
 */
//+------------------------------------------------------------------
void SlsEiger::read_temp(Tango::Attribute & out_attr,
                         Tango::DevLong * out_attr_read,
                         lima::SlsEiger::Temperature in_temperature_type,
                         int in_module_index,
                         const std::string & in_caller_method_name)
{
    try
    {
        // if an acquisition is running, the attribute is in alarm because we return the latest cache value.
        bool attribute_is_in_alarm = (get_state() == Tango::RUNNING);

        // get the camera value
        int temperature = m_camera->getTemperature(in_temperature_type, in_module_index);

        // set the attribute value
        *out_attr_read = (Tango::DevLong)(temperature);
        out_attr.set_value(out_attr_read);
        out_attr.set_quality((attribute_is_in_alarm) ? Tango::ATTR_ALARM : Tango::ATTR_VALID);
    }
    catch(Tango::DevFailed& df)
    {
        manage_devfailed_exception(df, in_caller_method_name);
    }
    catch(Exception& e)
    {
        manage_lima_exception(e, in_caller_method_name);
    }
}

/*----- PROTECTED REGION END -----*/	//	SlsEiger::namespace_ending
} //	namespace
